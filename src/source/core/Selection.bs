
import "pkg:/source/core/Collections.bs"

namespace mc
  @node("mc_Selection", "ContentNode")
  class Selection
    'item that started the selection
    initialItem as roSGnode

    'parentCollection where this item came from
    parentCollection as roSGnode

    'current item, if changed since initial Item
    currentItem as roSGnode

    'e.g. play or display
    action as string

    'extra info that is used to execute the action
    actionInfo = {}

    'screen where selection occurred
    originScreen as roSGnode

    ' kind of screen to create, to execute the selection
    targetScreen as string

    'extra info that can be used to supply context to the selection
    context as roAssociativeArray

    ' pending|success|error - can listen for this on async selection scenarios - the state should only be changed once!
    state = "pending"

    ' pending|success|error
    itemCompletionState = "pending"

    ' info pertaining to state changes
    result = {}

    function getNextItem(args = invalid as dynamic) as roSGnode
      return mc.collections.getItemAtOffset(m.parentCollection, m.currentItem, 1, invalid, false, false)
    end function

    function getPreviousItem(args = invalid as dynamic) as roSGnode
      return mc.collections.getItemAtOffset(m.parentCollection, m.currentItem, -1, invalid, false, false)
    end function

    function moveToNextItem(args = invalid as dynamic)
      m.currentItem = m.getNextItem()
    end function

    function moveToPreviousItem(args = invalid as dynamic)
      m.currentItem = m.getPreviousItem()
    end function

    function getItemIndex(item as roSGnode) as integer
      return mc.collections.getArrayIndex(m.parentCollection, item)
    end function

    function clone(resetState = true as boolean)
      if resetState = true
        result = {}
        state = "pending"
        itemCompletionState = "pending"
      else
        result = m.result
        state = m.state
        itemCompletionState = m.itemCompletionState
      end if

      return mc.createSGNode(m.top.subType(), invalid, m.top.id, {
        initialItem: m.initialItem
        parentCollection: m.parentCollection
        currentItem: m.currentItem
        action: m.action
        actionInfo: m.actionInfo
        originScreen: m.originScreen
        targetScreen: m.targetScreen
        context: m.context
        state: state
        itemCompletionState: itemCompletionState
        result: result
      })
    end function

    function setCompletionState(state as string)
      if m.itemCompletionState = "pending"
        m.itemCompletionState = state
      end if
    end function

  end class
end namespace
