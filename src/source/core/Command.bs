import "pkg:/source/core/DebugTimer.bs"
namespace mc
  interface ICommand
    optional name as string
    optional func as function
    optional ignoreFailure as boolean
    optional parentCommand as mc.ICommand
    optional childCommands as roArray
    optional isFinished as boolean
    optional commandCount as integer
    optional isOk as boolean
    optional isOptional as boolean
    optional isActive as boolean
    optional isProvider as boolean
    optional timer as mc.utils.DebugTimer
    optional isParallel as boolean
    optional isSequence as boolean
    optional isWaitingResult as boolean
    optional isTask as boolean
    optional taskName as string
    optional taskArgs as roAssociativeArray
  end interface

  interface CommandOptions
    optional ignoreFailure as boolean
    optional isWaitingResult as boolean
    optional onComplete as function
  end interface

  class Command
    name as string
    func as function
    ignoreFailure = false
    parentCommand as ICommand
    childCommands = []
    isFinished = false
    commandCount = 0
    isOk = true
    timer as mc.utils.DebugTimer

    function new(name as string, func as function, options = {} as CommandOptions)
      m.name = name
      m.func = func
      m.timer = mc.utils.DebugTimer(name)
      m.ignoreFailure = asBoolean((options as dynamic).ignoreFailure)
    end function

    function configureChildCommands(commands as roArray)
      m.childCommands = []
      if isArray(commands)
        for each command in commands
          if command <> invalid and not (command.isOptional = true and command.isActive = false)
            command.parentCommand = m
            m.childCommands.push(command)
          end if
        end for
        m.commandCount = m.childCommands.count()
      else
        ? "ERROR: CANNOT SET COMMAND CHILDREN: RECEIVED NON ARRAY" m.name
        m.isOk = false
      end if
    end function
  end class

  class TaskCommand extends Command
    isTask = true
    taskArgs as roAssociativeArray
    taskName as string
    onComplete as function
    parentCommant as ICommand
    isWaitingResult = true

    function new(name as string, taskName as string, taskArgs as roAssociativeArray, options = {} as CommandOptions)
      super(name, invalid, options)
      m.isWaitingResult = asBoolean(options.isWaitingResult, true)
      m.isTask = true
      m.taskName = taskName
      m.taskArgs = taskArgs
      m.onComplete = options.onComplete
    end function
  end class

  class SequentialCommand extends Command
    commandIndex = -1
    completeCount = 0
    currentCommand as ICommand
    isSequence = true

    function new(name as string, commands = [] as roArray, options = {} as CommandOptions)
      super(name, invalid, options)
      m.configureChildCommands(commands)
    end function

    function moveNext()
      nextCommand = invalid
      while nextCommand = invalid and m.commandIndex < m.commandCount
        m.commandIndex++
        nextCommand = m.childCommands[m.commandIndex]
      end while
      m.currentCommand = nextCommand
    end function

    function completeCommand(command as Command)
      m.completeCount++
      m.isFinished = m.completeCount = m.commandCount
    end function

  end class
  class OptionalCommand extends Command
    isOptional = true
    isActive = false

    function new(name as string, isActive as boolean, func as function, options = {} as CommandOptions)
      super(name, func, options)
      m.isActive = isActive
    end function
  end class
  class OptionalSequentialCommand extends SequentialCommand
    isOptional = true
    isActive = false

    function new(name as string, isActive as boolean, commands = [] as roArray, options = {} as CommandOptions)
      super(name, isActive ? commands : [], options)
      m.isActive = isActive
    end function
  end class

  class ParallelCommand extends Command
    completeCount = 0
    currentCommand as Command
    isParallel = true

    function new(name as string, commands = [] as roArray, options = {} as CommandOptions)
      super(name, invalid, options)
      m.configureChildCommands(commands)
    end function

    function completeCommand(command as ICommand)
      m.completeCount++
      m.isFinished = m.completeCount = m.commandCount
    end function
  end class

  class OptionalParallelCommand extends ParallelCommand
    isOptional = true
    isActive = false

    function new(name as string, isActive as boolean, commands = [] as roArray, options = {} as CommandOptions)
      super(name, isActive ? commands : [], options)
      m.isActive = isActive
    end function
  end class

  class CommandProvider extends Command
    isProvider = true

    function new(name as string, builderFunction as function)
      super(name, builderFunction, {})
    end function
  end class
end namespace
