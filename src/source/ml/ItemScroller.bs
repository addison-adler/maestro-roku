import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/CellInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/FocusIndicatorConfig.bs"
import "pkg:/source/core/DebugTimer.bs"

namespace ml
  class ItemScroller extends mc.BaseClass

    public container as roSGNodeGroup
    public offsetContainer as roSGNodeGroup

    public viewManager as ml.ItemViewManager

    public focusManager as roSGNodeml_FocusIndicatorManager
    public viewPortEventNotifier
    protected settings as roSGNodeml_FocusSettings

    public isMovingMultiple = false

    public isLastMoveFlowFocus = false

    public cellInfo as ml.CellInfo
    public nextCellInfo as ml.CellInfo
    public nextFocusIndicatorConfig as ml.FocusIndicatorConfig
    public targetCellInfo as ml.CellInfo

    public focusedItem as roSGNode

    public index = 0
    public nextIndex = 0

    public focusedIndex = 0
    public nextPosition = 0
    public targetIndex = 0
    public scrollStartIndex = 0
    public direction = 0
    public axes = 0 'x = 0, y =1
    public screenPos = 0
    public nextScreenPos = 0

    public isFloatingFocus = false
    public isOnlyFloatingFocus = false

    public moveAnimation

    protected animSpeed = 0.05
    protected animSpeedIndex = 0.05

    protected activeScrollLocation = 0
    protected lastScrollOffsetFraction = 0
    protected nextScrollLocation = 0
    protected postHopIndex = 0
    protected isScrollCancelled = false
    protected keyPressIndex = 0

    protected previousScreenPos = 0
    protected disableScrollOffsetAnim = false

    protected isMultiMoveFinished = false
    disableNonAnimatedFocusUpdates = false

    function new(name as string, viewManager as ml.ItemViewManager, focusManager as roSGNodeml_FocusIndicatorManager)
      super(name)
      m.viewManager = viewManager
      viewManager.itemScroller = m

      m.container = m.viewManager.container
      m.axes = m.viewManager.axes
      m.viewPortEventNotifier = new ml.ViewPortEventNotifier(viewManager)
      m.moveAnimation = new mv.animations.Move(m.container, 1, m.container.translation, m.container.translation)
      m.moveAnimation.observeFraction(m.onAnimationFractionChange, m)
      m.focusManager = focusManager
    end function

    public function onViewManagerUpdate()
      if m.viewManager.settings <> invalid
        m.settings = m.viewManager.settings.focusSettings
      end if

      m.viewPortEventNotifier.onViewManagerUpdate()
    end function

    public function reset(keepOldFocusIfPossible = false as boolean) as void

      ' ? " RESET keepOldFocusIfPossible "; keepOldFocusIfPossible

      if keepOldFocusIfPossible
        index = m.index
      else
        index = 0
      end if

      m.onViewManagerUpdate()

      'FIXME - fix recovering focus
      if keepOldFocusIfPossible
        ' ? m.__classname ; " KEEP INDEX"
        if index >= m.viewManager.numberOfItems
          ' ? m.__classname ; " NEEDS FIXING TO LAST "
          'move to next item
          index = m.viewManager.numberOfItems - 1
        end if
      end if

      m.setFocusIndex(index, false, false)
    end function

    public function cancelScrolling(setFocusNow = false as boolean)
      ' ? ">>> CANCEL SCROLLING " ; m.__classname ; " " ; m.viewManager.isScrolling " " setFocusNow

      if setFocusNow
        m.focusManager@.completeFocusNow()
      end if

      'Tidy up the scrolling in here
      m.isScrollCancelled = m.viewManager.isScrolling
      if m.viewManager.isScrolling
        ' ? "000000000000000000000000000000000000 "; m.isScrollCancelled
        ' m.toggleScrolling(false)
        ' m.setTargetCellInfo(m.nextCellInfo)
        m.moveAnimation.pause()
        m.finishAnimating()
        m.isMovingMultiple = false
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function getAnimSpeed(animSpeedIndex as integer)
      speed = 1
      'bs:disable-next-line
      if m.row <> invalid
        settings = m.viewManager.getFocusSettings()
      else
        settings = m.viewManager.listSettings
      end if

      if settings <> invalid
        speed = settings.animSpeeds[mc.clamp(animSpeedIndex, 0, settings.animSpeeds.count() - 1)]
      end if

      ' ? " >>>> USING SPEED INDEX " m.keyPressIndex
      speed = mc.clamp(speed - m.keyPressIndex, 0.02, speed)
      return speed
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ MoveToIndex Convenience Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function canMoveInDirection(direction as integer) as boolean
      'm.log.resetIndent()
      ' m.viewManager.recalculateCellInfos(false)
      return m.canMoveToIndex(m.index + direction, direction)
    end function

    function canMoveToIndex(index as integer, direction as integer) as boolean
      ' ? "CMTI D "; direction; " MI " ; index ; " NC "; m.viewManager.numberOfItems
      ' m.viewManager.recalculateCellInfos(false)
      return m.viewManager.numberOfItems > 0 and ((direction = -1 and index > -1) or (direction = 1 and index < m.viewManager.numberOfItems))
    end function

    function moveToContentIndex(index as integer, animated = true as boolean, animSpeedIndex = 0 as integer, direction = invalid as integer, forceSequential = true as boolean) as boolean
      ' m.viewManager.recalculateCellInfos(false)
      info = m.viewManager.getCellInfoForContentIndex(index)
      if info <> invalid
        ' ? " MTCI 111 " m.__classname
        ' ? " INFO INDEX IS "; info.index
        return m.moveToIndex(info.index, animated, animSpeedIndex, direction, forceSequential)
      else
        ' ? "+++ cannot move to content index - no info"
      end if
      return false
    end function


    function moveFromPress(offset as integer, forceSequential = true as boolean, isPage = false as boolean) as boolean
      m.isScrollCancelled = false
      speedIndex = 1
      ' ? " MOVE FROM PRESS " m.viewManager.owner._repeatKeyPressCount " IScrolling? " m.viewManager.isScrolling
      ' if m.viewManager.isScrolling
      if m.direction = offset
        if m.viewManager.owner._repeatKeyPressCount > 1
          ' ? " GOING SAME WAY!!!"
          ' speedIndex = 2
          ' ? " m.direction " m.direction " INDEX " m.index " NITEMS " m.viewManager.numberOfItems
          ' ? "111PSP " m.previousScreenPos "NSP " m.nextScreenPos " lastScrollOffsetFraction " m.lastScrollOffsetFraction
          ' if m.previousScreenPos <> m.nextScreenPos
          '   ? " CANNOT DO DBL MOVES WHEN SCREEN POS DOES NOT MATCH"
          '   return true
          ' end if
          if m.offsetContainer <> invalid
            m.previousScreenPos = m.offsetContainer.translation[1]
          end if
          ' ? "222PSP " m.previousScreenPos "NSP " m.nextScreenPos " lastScrollOffsetFraction " m.lastScrollOffsetFraction
          if not m.canMoveToIndex(m.index, m.direction)
            ' ? "USER IS SPAMMING KEYS AT END"
            m.finishMovingToIndex()
            'return true, coz the user is spamming the keys
            return true
          end if
          ' ? " USER IS MOVING FASTER NOW"
          if m.offsetContainer <> invalid
            m.previousScreenPos = m.offsetContainer.translation[1]
          end if
          ' ? "333PSP " m.previousScreenPos "NSP " m.nextScreenPos " lastScrollOffsetFraction " m.lastScrollOffsetFraction
          ' m.finishMovingToIndex(false, false)
        end if
      else if m.viewManager.isScrolling
        'only allowed if screenPositions are the same!
        if m.previousScreenPos = m.nextScreenPos
          previousScreenPos = m.previousScreenPos
          m.disableScrollOffsetAnim = true
          m.finishMovingToIndex(false, false)
          ' ? "333PSP " m.previousScreenPos "NSP " m.nextScreenPos " lastScrollOffsetFraction " m.lastScrollOffsetFraction
          m.moveToIndex(m.index + offset, true, 2)
          m.previousScreenPos = previousScreenPos
          m.updateSrollOffsetFraction(1)
          m.disableScrollOffsetAnim = false
        else
          ' ? "CANNOT DO THIS DUE TO DIFFERENT SCREEN POS's.. too riksy: can add jeriking view animation"
        end if
        return true
        ' end if
      end if

      m.keyPressIndex = mc.clamp(cInt(m.viewManager.owner._repeatKeyPressCount / 3) * 0.02, 0.01, 0.2)

      if isPage
        offset = m.getPageOffset(offset)
        speedIndex = 2
      end if
      ' ? "MOVING TO " offset " with keyPressIndex" m.keyPressIndex
      return m.move(offset, true, speedIndex, not isPage and forceSequential)
    end function

    private function getPageOffset(offset as integer) as integer
      offset *= 4
      newIndex = m.index + offset

      if newIndex < 0
        return -m.index
      else if newIndex >= m.viewManager.numberOfItems - 1
        return (m.viewManager.numberOfItems - m.index) - 1
      end if

      return offset
    end function

    function move(offset as integer, animated = true as boolean, animSpeedIndex = 0 as integer, forceSequential = true as boolean) as boolean
      ' ? " MOVE I " ; m.index ; " O " ; offset
      index = m.index + offset

      if offset > 0
        direction = 1
      else
        direction = -1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("move in direction", direction, " cannot be performed")
        ' ? "+++ could not move"
        return false
      end if

      ' ? " MTCI 222 " m.__classname
      return m.moveToIndex(index, animated, animSpeedIndex, direction, forceSequential)

      ' return false
    end function

    function moveToEnd(direction as integer, screenPos = invalid as integer, animated = true as boolean, animSpeedIndex = 0 as integer) as boolean
      ' ? ">>>>>>>>>> MOVE TO END"

      m.isScrollCancelled = false

      if direction = -1
        index = 0
      else
        index = m.viewManager.numberOfItems - 1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("already at end - ignoring")
        ' ? ">>>Already at end "
        return false
      end if

      ' ? " MTCI 333 " m.__classname " index " index " numberOfItems " m.viewManager.numberOfItems
      m.moveToIndex(index, animated, animSpeedIndex)
      return true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Movement Machinery
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ' move to the Virtual Index
    function moveToIndex(index as integer, animated = true as boolean, animSpeedIndex = 0 as integer, direction = invalid as integer, forceSequential = true as boolean, isContinuing = false as boolean, notifyFocusManager = true as boolean) as boolean
      'm.log.increaseIndent()Indent("MOVE TO INDEX")

      m.log.info("moveToIndex I", m.__classname, m.index, "NI", index, animated)
      m.log.verbose(">?>?>?>?>?////////////////////////////////////////////////////.v///")
      m.log.verbose("////// MTI ", m.index, " NI ", index, " d ", direction, " FS ", forceSequential)
      index = mc.clamp(index, 0, m.viewManager.numberOfItems - 1)
      'FIXME - cancel/tidy up a move in progress
      m.fractionWhenFinishBegan = 0
      m.focusManager@.cancelFlowFocus()

      if m.viewManager.numberOfItems = 0
        ' ? " NO ITEMS"
        'm.log.decreaseIndent()
        return false
      end if

      ' ? " MTI BB"
      if direction = invalid
        direction = 0
        if index < m.index
          direction = -1
        else
          direction = 1
        end if
      end if
      ' ? "////// MTI RESOLVED " ; m.index ; " NI " ; index ; " d " ; direction ; " FS " ; forceSequential

      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 1. get cellInfo"
      '////////////////////////////////////////////////////////////////////////

      m.isMovingMultiple = abs(index - m.index) > 1

      if forceSequential
        nextCellInfo = m.viewManager.cellInfos[mc.clamp(m.index + direction, 0, m.viewManager.numberOfItems - 1)]
      else
        nextCellInfo = m.viewManager.cellInfos[index]
      end if

      targetCellInfo = m.viewManager.cellInfos[index]
      m.direction = direction

      'TODO - calculate the next hop index.. - for now we can configure this

      m.setTargetCellInfo(targetCellInfo)

      ' ? ":::::::::::::: MOVE TO INDEX SET COMP INFO"
      ' ? " NI " ; nextCellInfo.index
      ' ? " TI " ; targetCellInfo.index

      m.animSpeed = m.getAnimSpeed(animSpeedIndex)
      m.animSpeedIndex = m.getAnimSpeed(animSpeedIndex)

      ' ? " MTI CC"
      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 2. Ascertain offset "; m.__classname
      '////////////////////////////////////////////////////////////////////////

      ' ? "2.b IS FLOW POSSIBLE ??? " ; m.screenPos ; "m.viewManager.maxPos " ;m.viewManager.maxPos; " NFA "; nextCellInfo.isFlowFocusAllowed
      isFlowPossible = animated and m.viewManager.isFlowFocusPossible(nextCellInfo, direction, m.screenPos)

      ' ? " ::::::::::::::: setNextCellInfo DDD"
      m.isLastMoveFlowFocus = isFlowPossible
      m.setNextCellInfo(nextCellInfo)
      ' ? " POS " ;m.container.translation[m.axes] ; " ASP "; m.screenPos ; " MP "; m.viewManager.maxPos ; " D " ; direction

      m.log.verbose(" MTI DD")
      if isFlowPossible
        ' ? "///// 2.b flow IS POSSIBLE I " ; index
        ' ? " CELLINFO " m.cellInfo
        ' ? " nextCellInfo " nextCellInfo
        m.moveUsingFlowAnim(m.cellInfo, nextCellInfo, m.direction)
        'm.log.decreaseIndent()
        return true
      end if

      translation = m.container.translation

      translation[m.axes] = (-targetCellInfo.getPosition(direction))
      'TODO - need to get a different position if we are in floating focus!
      ' translation[m.axes] = (-targetCellInfo.getScrollOffset(direction))
      ' ? "////// offset is "; translation[m.axes]

      ' ? " MTI EE"
      if animated
        '////////////////////////////////////////////////////////////////////////
        ' ? "/////// 3. animated move"
        '////////////////////////////////////////////////////////////////////////

        ' ? ">>>> START ANIM ; REGULAR CONTAINER ANIM - moveToIndex "; m.index ; " F " formatJson(m.container.translation); " TO " ; formatJson(translation) ; " SPEED "; m.animSpeed ; " " ; m.__classname
        m.toggleScrolling(true)
        m.setFocusIndex(m.index, true, true, false)

        m.moveAnimation.animateToWithSpeed(translation, m.animSpeed)
        m.moveAnimation.start()
      else
        '////////////////////////////////////////////////////////////////////////
        ' ? " ///////// 4. non-animated move"
        '////////////////////////////////////////////////////////////////////////
        ' ? " MTI FF"
        ' ? "HERE HERE " ; m.__classname
        m.toggleScrolling(false)
        m.container.translation = translation
        ' ? " TCI " ; targetCellInfo.index ; " Content index "; targetCellInfo.componentIndex ; " C " ; mc.dv (targetCellInfo.component)
        m.nextScreenPos = targetCellInfo.getScreenPosition(m.direction)
        ' ? "nextScreenpos " ; m.nextScreenPos ; " index " ; index

        m.updateSrollOffsetFraction(1)
        ' ? " MTI GG"
        if not m.disableNonAnimatedFocusUpdates
          ' ? " MTI HH"
          'Grid rows will handle getting their own focus, as they may have called this as part of going to a specific subrow
          m.setFocusIndex(index, false, notifyFocusManager)
          m.forceFocusOnIndex(index, notifyFocusManager)
        end if
        m.setCellInfo(targetCellInfo)
      end if

      'm.log.decreaseIndent()
      return true
    end function

    private fractionWhenFinishBegan = 0

    ' move to the Virtual Index
    function finishMovingToNextComponent(animated = true as boolean) as boolean
      ' ? "moving to next component"
      'FIXME - cancel/tidy up a move in progress
      ' m.focusManager@.cancelFlowFocus()
      m.fractionWhenFinishBegan = m.getCurrentIndexFraction(m.container.translation[m.axes])

      ' ? " FRACTION WHEN FINISH BEGAN IS " m.fractionWhenFinishBegan
      m.isScrollCancelled = false

      direction = m.direction

      nextCellInfo = m.nextCellInfo
      ' m.setTargetCellInfo(nextCellInfo)

      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 2. Ascertain offset "; m.__classname
      '////////////////////////////////////////////////////////////////////////

      ' ? "2.b IS FLOW POSSIBLE ??? " ; m.screenPos ; "m.viewManager.maxPos " ;m.viewManager.maxPos; " NFA "; nextCellInfo.isFlowFocusAllowed
      isFlowPossible = m.viewManager.isFlowFocusPossible(nextCellInfo, direction, m.screenPos)

      ' ? " ::::::::::::::: setNextCellInfo DDD"
      m.isLastMoveFlowFocus = isFlowPossible and animated
      ' ? " POS " ;m.container.translation[m.axes] ; " ASP "; m.screenPos ; " MP "; m.viewManager.maxPos ; " D " ; direction

      if isFlowPossible and animated
        ' ? "///// 2.b flow IS POSSIBLE I " ; nextCellInfo.index
        m.moveUsingFlowAnim(m.cellInfo, nextCellInfo, m.direction)
        return true
      end if

      translation = m.container.translation
      translation[m.axes] = -nextCellInfo.getPosition(direction)

      ' ? "////// offset is "; translation[m.axes]

      if animated
        '////////////////////////////////////////////////////////////////////////
        ' ? "/////// 3. animated move"
        '////////////////////////////////////////////////////////////////////////

        ' ? ">>>> START ANIM ; REGULAR CONTAINER ANIM - moveToIndex "; m.index ; " F " formatJson(m.container.translation); " TO " ; formatJson(translation) ; " SPEED "; m.animSpeed ; " " ; m.__classname
        ' m.toggleScrolling(true)
        ' m.setFocusIndex(m.index, true)
        m.moveAnimation.animateToWithSpeed(translation, m.animSpeed)
        m.moveAnimation.start()
      else
        '////////////////////////////////////////////////////////////////////////
        ' 4. non-animated move
        '////////////////////////////////////////////////////////////////////////
        m.toggleScrolling(false)
        m.container.translation = translation
        m.nextScreenPos = m.nextCellInfo.getScreenPosition(m.direction)
        ' index = m.nextCellInfo.index
        ' ? " NI " ; index
        m.updateSrollOffsetFraction(1)

        ' m.setFocusIndex(index, false, true)
        ' m.forceFocusOnIndex(index, true)
        m.setCellInfo(m.nextCellInfo)
      end if

      return true
    end function

    function getCurrentIndexFraction(position as float)
      ' ? "OCPC " ; offset

      distance = abs(m.nextScrollLocation - m.activeScrollLocation)
      currentPos = abs(m.activeScrollLocation - position)
      if distance <> 0
        fraction = currentPos / distance
      else
        fraction = 0
      end if
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? ">>> F " ; fraction ; " CI " ; m.cellInfo.index ; ": ASL " ; m.activeScrollLocation ; " >>> NSI " ; m.nextCellInfo.index ; ": NSL >> "; m.nextScrollLocation ; " T " ; m.container.translation[m.axes] ; " p "; position ; " D " ; distance ; " CP "; currentPos
      ' ? " ASP " ; m.screenPos

      ' ? "))))"
      if fraction > 1
        fraction = 1
      else if fraction < 0
        fraction = 0
      end if

      return fraction
    end function

    private animFrequency = 0
    function onAnimationFractionChange(fraction as float) as void
      ' debugTimer = new mc.utils.DebugTimer("onAnimationFractionChange")
      ' ? ">>>+>>>+ OAFC "; fraction ; " imm "; m.isMovingMultiple ; " TCI " ; mc.getPath(m.targetCellInfo, "index") ; " NCI " ;m.cellInfo.index
      if fraction = 1 and not m.isMovingMultiple
        ' ? ">>>+>>>+ FINISHED REGULAR ANIM AT NEXT INDEX " ; m.nextIndex
        m.screenPos = m.nextCellInfo.getScreenPosition(m.direction)

        ' m.updateSrollOffsetFraction(1)
        m.finishMovingToIndex()
        ' debugTimer.log("finishMovingToIndex")
      else if m.isMovingMultiple

        if fraction = 1
          ' isInPlace = (m.targetCellInfo = invalid or m.cellInfo.index <> m.targetCellInfo.index)
          ' ? " REGULAR ANIM FINISHED " ; isInPlace '": BUT STILL NOT IN PLACE!"
          ' m.updateSrollOffsetFraction(1)
          m.finishMovingToIndex()
        else

          ' m.animFrequency++
          ' if m.animFrequency < 2
          '   ? " SKIP ANIM UPDATE"
          '   return
          ' end if
          ' m.animFrequency = 0
          f = mc.clamp(m.getCurrentIndexFraction(m.container.translation[m.axes]), 0, 1)

          ' ? "+>>>+>>>>+ DDDDD " ; f ; " I "; m.index ; " ni "; m.nextIndex ; " NSL " ; m.nextScrollLocation ; "ASL" ; m.activeScrollLocation
          m.updateSrollOffsetFraction(f)
          ' debugTimer.log("updateSrollOffsetFraction")
          if f >= 1
            ' ? ">>>>>>>>>>>>>>>>>>>>>>>>>>"
            ' ? " SET NEXT FOCUS INDEX "; m.nextIndex ; " " ; m.isScrollCancelled
            if m.isScrollCancelled
              m.finishMovingToIndex()
            else
              m.focusManager@.onFocusAnimationUpdate(1)
              m.screenPos = m.nextCellInfo.getScreenPosition(m.direction)
              m.setFocusIndex(m.nextIndex, true, true)
            end if
          else
            m.focusManager@.onFocusAnimationUpdate(f)
          end if
        end if
        ' debugTimer.log("finish updating")
      else
        'simple one keypress case
        m.updateSrollOffsetFraction(fraction)
        if m.fractionWhenFinishBegan <> 0
          fraction = (fraction * (1 - m.fractionWhenFinishBegan)) + m.fractionWhenFinishBegan
        end if
        m.focusManager@.onFocusAnimationUpdate(fraction)
      end if

      ' debugTimer.log("finish")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Finishing Movement
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function finishAnimating() as void
      m.finishMovingToIndex()
    end function

    function finishMovingToIndex(isFromFlow = false as boolean, animated = true as boolean) as boolean

      ' ? "VVVVV finishMovingToIndex TI " ; mc.getPath(m.targetCellInfo, "index") ; " IS " ; m.viewManager.isScrolling
      ' ? m.__classname ; " " ; m.isScrollCancelled
      m.keyPressIndex = 0
      if m.isScrollCancelled
        ' ? "VVVVV SCROLL CANCELLED " ; m.nextScrollLocation ; " " ; m.container.translation[m.axes]
        if m.container.translation[m.axes] = m.nextScrollLocation or isFromFlow or not animated
          ' ? " is in position"
          m.toggleScrolling(false)
          if isFromFlow
            m.focusManager@.onFocusAnimationUpdate(1)
            m.updateSrollOffsetFraction(1)
            ' m.setFocusIndex(m.index, false, false)
          else
            m.setFocusIndex(m.nextIndex, false, false)
            if not animated
              m.updateSrollOffsetFraction(1)
            end if
          end if

          return false
        else
          ' ? "+++++++++++++++++++"
          ' ? "is not in position yet - finishing T " ; m.nextScrollLocation ; " P " ; m.container.translation[m.axes] ; " D " ; m.direction
          ' ? "VVVVV Need to move to index " ; m.nextIndex
          index = m.nextIndex
          if (m.direction = 1 and m.container.translation[m.axes] < m.nextScrollLocation) or (m.direction = -1 and m.container.translation[m.axes] > m.nextScrollLocation)
            ' ? "Moved past this item - need to go forward one more"
            index += m.direction
          end if
          isMoving = m.finishMovingToNextComponent()
          if isMoving
            return true
          end if
        end if
      else
        ' ? "VVVV is not cancelled"
      end if

      if not m.viewManager.isScrolling
        ' ? "VVVVV Scrolling is finished - cannot finish move"
        m.focusManager@.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        return false
      end if

      if not m.isMovingMultiple and not m.isScrollCancelled
        ' ? "VVVVV was a simple move IFF " ; isFromFlow
        ' ? "MI "; m.index ; " NI "; m.nextIndex

        m.focusManager@.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        m.toggleScrolling(false)
        m.setFocusIndex(m.nextIndex, false, false)
        return false
      end if

      ' cellInfo = m.cellInfo
      cellInfo = m.nextCellInfo
      ' ? "VVVV NCI " ; mc.getPath(m.targetCellInfo, "index"); mc.getPath(cellInfo, "index")
      if cellInfo = invalid
        ' ? "VVVVV NO Component Info"
        m.focusManager@.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        m.setFocusIndex(m.nextIndex, true, true)
        m.toggleScrolling(false)
        m.isMultiMoveFinished = true
        return false
      end if

      if m.targetCellInfo = invalid or cellInfo.index = m.targetCellInfo.index
        ' ? "VVVVV HAVE ARRIVED"
        m.focusManager@.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        m.toggleScrolling(false)
        m.setFocusIndex(m.nextIndex, false, false)
        m.isMultiMoveFinished = true
        return false
      end if

      if isFromFlow
        m.setFocusIndex(m.nextIndex, true, false)
        m.focusManager@.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
      end if
      ' ? "VVVVV Need to move to index " ; m.targetCellInfo.index ; " at " ; cellInfo.index
      ' ? " MTCI 444 " m.__classname
      isMoving = m.moveToIndex(m.targetCellInfo.index, true, m.animSpeedIndex, m.direction, true, true)
      ' ? " isMoving "; isMoving
      if not isMoving
        ' ? "VVVVV Final move could not be done"
        m.toggleScrolling(false)
      end if
      return isMoving
    end function

    function toggleScrolling(active as boolean)
      m.log.verbose("toggleScrolling ", active, " IS ", m.viewManager.isScrolling, " ", m.__classname)

      if m.viewManager.isScrolling <> active
        if active
          m.scrollStartIndex = m.index
        end if
        m.viewManager.setIsScrolling(active, m.isMovingMultiple, m.index)
      end if

      if not active
        m.setTargetCellInfo(invalid)
        m.moveAnimation.stop(false)
        m.isMovingMultiple = false
        m.scrollStartIndex = -1
      end if
    end function

    function setFocusManagerInfo(cellInfo as ml.CellInfo, nextCellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean) as void
      if isFloatingFocus
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextCellInfo, m.direction, true)
      else
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextCellInfo, m.direction, false)
      end if
      ' m.log.info("Set focus ManagerInfo to ", cellInfo.index, cellInfo.componentIndex)
      ' ? " SNIC 666 " cellInfo.index " " cellInfo.componentIndex
      m.focusManager@.setNextFocusIndicatorConfig(m.nextFocusIndicatorConfig)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Flow Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function moveUsingFlowAnim(fromInfo as ml.CellInfo, toInfo as ml.CellInfo, direction as integer)
      ' ? ")))))) moveUsingFlowAnim I " ; m.index ; " FI " ; fromInfo.index ; " TI " ; toInfo.index ; " CI " ; toInfo.contentIndex ; "  "; m.__classname

      m.isLastMoveFlowFocus = true
      m.toggleScrolling(true)
      m.log.verbose("==== FROM moveUsingFlowAnim")
      ' ? " MOVE USING FLOW"
      m.setFocusManagerInfo(fromInfo, toInfo, direction, true)
      ' ? "FLOW "; m.animSpeed
      m.focusManager@.startFlowFocus(m.nextFocusIndicatorConfig, m.animSpeed, mc.getTop())
    end function

    function onFlowFocusFraction(fraction as float)
      ' ? "+>+>+>+> on FLow fraction"; fraction ; m.__classname
      ' m.log.info("onFlowFocusFraction", fraction, "multiple", m.isMovingMultiple, "targetIndex", m.targetIndex)

      if fraction = 1
        ' ? "+>+>+>+ FINISHED FLOW " ; m.__classname ; " multiple: " ; m.isMovingMultiple ; " TI " ; m.targetIndex
        m.log.info("finished focusing action with this flow")

        ' ? "+>+>+>+> "; mc.getPath(m.targetCellInfo, "index"); " MI "; m.index ; " NI " ; m.nextIndex
        m.finishMovingToIndex(true)
      else
        m.focusManager@.onFocusAnimationUpdate(fraction)
        m.updateSrollOffsetFraction(fraction)
      end if
    end function

    protected function updateSrollOffsetFraction(fraction as float) as void
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ State Tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function setCellInfo(info as ml.CellInfo)
      m.cellInfo = info
      if info <> invalid
        ' ? "SCI>>> (" ; m.__classname ; ") " ; info.index ; " CI " ; info.contentIndex
        m.index = info.index
        m.activeScrollLocation = -info.getPosition(m.direction)
        if not m.isLastMoveFlowFocus
          m.screenPos = info.getScreenPosition(m.direction)
        end if
      else
        ' m.index = -1
        m.index = 0
        m.activeScrollLocation = 0
        m.screenPos = 0
      end if
    end function

    protected function setNextCellInfo(info as ml.CellInfo) as void
      m.lastScrollOffsetFraction = 0

      if info = invalid
        m.nextCellInfo = invalid
        m.nextIndex = 0
        ' m.nextIndex = -1
        m.nextScrollLocation = 0
        m.nextFocusIndicatorConfig = invalid
        if not m.isLastMoveFlowFocus
          m.nextScreenPos = 0
        end if
        return
      end if

      ' ? m.__classname ; " SET NEXT COMPONENT INFO " ; info.index ; " IFF "; m.isLastMoveFlowFocus

      if info.index <> m.nextIndex
        m.nextIndex = info.index
        m.nextScrollLocation = -info.getPosition(m.direction)
        if not m.isLastMoveFlowFocus
          m.nextScreenPos = info.getScreenPosition(m.direction)
        end if
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(info, m.direction, m.isLastMoveFlowFocus)

        if m.nextCellInfo = invalid or info.contentIndex <> m.nextCellInfo.contentIndex
          m.viewManager.updateScrolling(info.contentIndex)
        else
          'we scrolled to a sub-row
          ' ? "setNextCellInfo - not (yet) reporting subrow move on CI "; info.contentIndex ; " SI "; info.componentIndex
        end if
      end if

      m.nextCellInfo = info
    end function

    function setTargetCellInfo(info as ml.CellInfo) as void
      m.targetCellInfo = info
      if info <> invalid
        ' ? " >>>>>>>>>>>>>>>> Target is " ; info.index
        m.targetIndex = info.index
      else
        ' ? " >>>>>>>>>>>>>>>> Target is invalid "
        ' m.targetIndex = -1
        m.targetIndex = 0
      end if
    end function

    ' /**
    '  * @member setFocusIndex
    '  * @memberof module:ItemScroller
    '  * @instance
    '  * @function
    '  * @description Responsible for all state updates, and hooks pertaning to focus position.
    '  *       NOTE : does NOT update position - you should be in position when calling this. for efficiency does not recalculate index: you should know the index when you call me!
    '  * @param {integer} index - the index you KNOW you are on when your move is finished (finished could mean from one index to nextindex, while animating; doesn't have to be targetIndex)
    '  * @param {boolean} isMoving - if true, then deltas are calculated for next position, and observers fired if their screen status will change
    '  */
    function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean, sendViewportEvent = true as boolean) as void
      'This MUST be called infrequently
      ' TODO - check if index is actually changed

      ' ? " SFI AA"
      if m.viewManager.numberOfItems = 0
        ' ? " SFI BB"
        return
      end if

      if false and index = -1
        ' ? " SFI CC"
        m.setCellInfo(m.viewManager.cellInfos[0])
        ' ? " ::::::::::::::: setNextCellInfo AAA"
        m.setNextCellInfo(m.viewManager.cellInfos[0])
        ' m.setNextIndex(0)
      else
        ' ? " SFI DD"
        if index >= m.viewManager.numberOfItems - 1
          ' ? " SFI EE"
          index = m.viewManager.numberOfItems - 1
        end if

        m.setCellInfo(m.viewManager.cellInfos[index])
        index = mc.clamp(m.index + m.direction, 0, m.viewManager.numberOfItems - 1)
        ' ? " ::::::::::::::: setNextCellInfo BBB"
        m.setNextCellInfo(m.viewManager.cellInfos[index])
      end if

      if m.cellInfo = invalid
        m.log.error("setFocusIndex - invalid cellInfo")
        return
      end if

      m.focusedItem = m.viewManager.visibleItems[m.cellInfo.contentIndex]

      if sendViewportEvent
        m.notifyViewportEvents(m.direction)
      end if

      if notifyFocusManager
        m.log.verbose("==== FROM setFocusIndex ", m.__classname)
        ' ? " ITEMSCROLLER FROM SET FOCUS INDEX"
        m._setFocusManagerInfo(m.cellInfo, m.nextCellInfo, m.direction, false)
      end if
    end function

    private pendingCellInfo
    private pendingNextCellInfo
    private pendingDirection
    private pendingIsFloatingFocus

    private function _setFocusManagerInfo(cellInfo as ml.CellInfo, nextCellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean) as void
      m.pendingCellInfo = cellInfo
      m.pendingNextCellInfo = nextCellInfo
      m.pendingDirection = direction
      m.pendingIsFloatingFocus = isFloatingFocus

      if m.focusManager._isContentUpdating
        ' ? ">+>+> SETTING FOCUS SYNC"
        m.setFocusManagerInfo(m.pendingCellInfo, m.pendingNextCellInfo, m.pendingDirection, m.pendingIsFloatingFocus)
      else
        ' ? ">+>+> SETTING FOCUS ASYNC"
        m.setTimeout(function()
          m.setFocusManagerInfo(m.pendingCellInfo, m.pendingNextCellInfo, m.pendingDirection, m.pendingIsFloatingFocus)
        end function)
      end if
    end function

    function notifyViewportEvents(direction as integer, forceAll = false as boolean)
      'bs:disable-next-line
      isInViewPort = m.viewManager.row = invalid or m.viewManager.row.isInViewPort

      m.viewPortEventNotifier.notifyViewportEvents(m.direction, isInViewPort, forceAll)
    end function

    function forceFocusOnIndex(index as integer, notifyFocusManager = true as boolean, notifyOwner = true as boolean) as void

      ' ? " >>>> forceFocusOnIndex " ; m.__classname
      if m.viewManager.numberOfItems = 0
        ' ? " no components!!"
        return
      end if

      index = mc.clamp(index, 0, m.viewManager.numberOfItems - 1)

      if m.cellInfo = invalid
        ' ? " ERROR - there was no cellInfo"
        m.setCellInfo(m.viewManager.cellInfos[index])
      end if

      m.setNextCellInfo(m.viewManager.cellInfos[index])

      m.index = index

      if notifyFocusManager
        ' ? "list notifying focus manager"
        m.log.verbose("==== FROM forceFocusOnIndex ")
        ' ? " FORCE FOCUS"
        m.setFocusManagerInfo(m.cellInfo, m.nextCellInfo, m.direction, false)
        m.focusManager@.onFocusAnimationUpdate(1)
      end if
    end function

    public function chooseCellInfoForScrollingIntoRow(cellInfo as ml.CellInfo)
      cellInfo = m.getCellInfo(cellInfo, true)
      if cellInfo <> invalid
        m.setCellInfo(cellInfo)
        ' ? " GRID CHOICE IS MADE index is now "; m.index
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus Indicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function getFocusIndicatorConfig(cellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as ml.FocusIndicatorConfig

      info = m.getCellInfo(cellInfo, isFromListScroll)

      ' rowIndex = m.viewManager.row = invalid ? - 1 : m.viewManager.row.index
      if info = invalid or info.component = invalid or m.settings = invalid
        ' ? "cannot get focus indicator cellInfo or cellInfo.component is invalid "; m.__classname
        return ml.createFocusIndicatorConfig(m.viewManager.row, invalid, direction, m.index)
      end if

      size = m.viewManager.getItemSize(info.contentIndex)
      translation = m.getFocusIndicatorTranslation(info, cellInfo, direction, isFloatingFocus)

      indicatorTranslation = [translation[0] + m.settings.feedbackOffsets[0], translation[1] + m.settings.feedbackOffsets[1]]

      indicatorSize = [size[0] + m.settings.feedbackOffsets[2] - m.settings.feedbackOffsets[0], size[1] + m.settings.feedbackOffsets[3] - m.settings.feedbackOffsets[1]]

      isHidden = mc.getPath(m.viewManager.content, "isHidden", false)

      config = ml.createFocusIndicatorConfig(m.viewManager.row, info.component as roSGNodeml_BaseCell, direction, info.contentIndex, isHidden, m.settings, indicatorTranslation, indicatorSize)
      return config
    end function


    protected function getCellInfo(cellInfo as ml.CellInfo, isFromListScroll = false as boolean) as ml.CellInfo
      return invalid
    end function

    protected function getFocusIndicatorTranslation(info as ml.CellInfo, cellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean) as object
      return [0, 0]
    end function

  end class
end namespace
