import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/core/Tasks.bs"
import "BaseObservable.bs"
import "pkg:/source/core/MIOC.bs"
import "pkg:/source/view/ViewUtils.bs"
import "pkg:/source/core/CommonInterfaces.bs"

namespace mx
  ' /**
  '  * @module BaseViewModel
  '  * @description Base class for all ViewModels
  '  */
  @useSetField
  class BaseViewModel extends mx.BaseObservable

    public state = "none"
    public focusId = invalid
    public isFocused = false
    public isShown = false
    protected isLongPressStarted = false
    protected longPressKey = ""
    protected longPressInterval = 0
    protected longPressTimer = invalid

    ' /**
    '  * @member new
    '  * @memberof module:BaseViewModel
    '  * @instance
    '  * @function
    '  * @description constructor for a view model.
    '  *              this class contains the common functions to assist in vm management
    '  *               - KeyMixin integration points
    '  *               - FocusMixin integration points
    '  *               - wrappers for key navigation methods
    '  * @param {string} name to use in logs, etc
    '  */

    public function new(name = "BaseViewModel" as string)
      super(name)
    end function

    @inject("styleManager")
    protected styleManager

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public API
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function initialize()
      super.initialize()
      m.state = "initialized"
    end function

    override function destroy()
      super.destroy()
      m.log.method("destroy")
      m.state = "destroyed"
    end function

    protected function onAddedToAggregateView(view as roSGNode)
    end function

    protected function onFirstShow()
      m.isShown = true
    end function

    protected function onShow()
      m.isShown = true
    end function

    protected function onRemovedFromAggregateView(view as roSGNode)
    end function

    protected function onHide()
      m.isShown = false
    end function

    protected function onGainedFocus(isSelfFocused as boolean)
      if isSelfFocused
        m.isFocused = true
        m.setFocusId(m.focusId)
      end if
    end function

    protected function onLostFocus()
      m.isFocused = false
    end function

    protected function setFocusId(id as string)
      if m.isFocused
        m.setField("focusId", id)
      else
        m.focusId = id
      end if
    end function

    protected function initializeView(view as roSGNode, args = invalid as roAssociativeArray)
      if view <> invalid
        view@._initialize(args)
      else
        m.log.error("view is invalid!")
      end if
    end function

    protected function setFocus(target as roSGNode, forceSet = false as boolean)
      'bs:disable-next-line
      mv_setFocus(target, forceSet)
    end function

    protected function setFocusLocked(target as roSGNode, message = "" as string)
      'bs:disable-next-line
      mv_setFocusLocked(target, message)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function createSGNode(nodeType as roSGNode, parent = invalid as roSGNode, id = invalid as string, args = invalid as roAssociativeArray or roArray, callInitialize = true as boolean, mTarget = invalid as mc.IBaseClass) as dynamic
      return mc.createSGNode(nodeType, parent, id, args, callInitialize, mTarget)
    end function

    protected function createNode(nodeType as string) as dynamic
      return mc.createNode(nodeType)
    end function

    protected function createViewsFromStyleJson(childrenJson as roArray, targetNode = invalid as roSGNode, assignViewsToM = true as boolean, mTarget = invalid as roAssociativeArray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      return mv.createViewsFromStyleJson(childrenJson, targetNode, assignViewsToM, mTarget)
    end function

    protected function updateViewsWithStyleJson(json as dynamic, mTarget = invalid as roAssociativeArray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      mv.updateViewsWithStyleJson(json, mTarget)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KEY HANDLING
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyEvent(key as string, press as boolean) as boolean
      result = false
      if press
        'bs:disable-next-line
        if mc.isFunction(m.isAnyKeyPressLocked) and m.isAnyKeyPressLocked(key)
          return true
        end if
        if mc.isFunction(m[`onKeyPress${key}`])
          result = m[`onKeyPress${key}`]()
        end if
      else
        result = false
      end if

      if result = invalid
        result = false
      end if

      if result and press

        longPressInterval = 0.0
        'bs:disable-next-line
        if mc.isFunction(m.getLongPressIntervalForKey)
          'bs:disable-next-line
          longPressInterval = m.getLongPressIntervalForKey(key) as float
        else
          longPressInterval = 0
        end if

        if longPressInterval > 0
          m.log.info("entering long press for key ", key)
          m.longPressKey = key
          'bs:disable-next-line
          m.toggleLongPressTimer(longPressInterval)
        end if
      else
        'bs:disable-next-line
        result = mc.isFunction(isCapturingAnyKeyPress) and isCapturingAnyKeyPress(key, press)
      end if

      'bs:disable-next-line
      if result = false and mc.isFunction(m.isCapturingAnyKeyPress)
        'bs:disable-next-line
        result = m.isCapturingAnyKeyPress(key, press)
      end if

      return result
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ scope support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function getTopField(fieldName as string) as dynamic
      return mc.getMField("top")[fieldName]
    end function

    protected function getMField(fieldName as string) as dynamic
      return mc.getMField(fieldName)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ nav support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    'Note the following methods are proxies to facilitate testing.
    'All of them will call out to the top level scope

    ' /**
    '  * @member push
    '  * @memberof module:BaseViewModel
    '  * @instance
    '  * @function
    '  * @description wrapper for push
    '  * @param {view} the view to push, if this is a string, then it is looked up on m - so you can push views by their id, as well as actual views
    '  */
    protected function push(view as roSGNode or string, animated = true as boolean)

      'TODO IS THIS STILL SUPPORTED?
      if mc.isString(view)
        view = m.getViewById(view as string)
      end if
      'bs:disable-next-line
      push(view, animated)
    end function

    protected function pop(animated = true as boolean) as roSGNode
      'bs:disable-next-line
      return(pop(animated))
    end function

    protected function dismiss(state as string, animated = true as boolean)
      if m.getTopField("navController") <> invalid and m.getTopField("isPoppingWhenDismissed") <> false
        m.pop(animated)
      end if

      if state <> invalid
        m.state = state
        m.getMField("top").state = state
      end if
    end function

    protected function getViewById(id as string) as roSGNode
      view = mc.getMField(id)

      if view = invalid
        m.log.error("could not find view with name ", id)
      end if

      return view
    end function

    protected function resetNavControllerToRoot(animated = true as boolean)
      'bs:disable-next-line
      resetNavControllerToRoot(animated)
    end function

    protected function resetNavController(newFirstScreen = invalid as roSGNode, endIndex = -1 as integer, animated = false as boolean)
      'bs:disable-next-line
      resetNavController(newFirstScreen, endIndex, animated)
    end function

    protected function replaceNavControllerScreen(targetScreen as roSGNode, animated = false as boolean)
      'bs:disable-next-line
      replaceNavControllerScreen(targetScreen, animated)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ task wrappers, for easy stubbing
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function observeNodeField(node as roSGNode, fieldName as string, callback as function or string, sendMode = "value" as string, once = false as boolean)
      mc.tasks.observeNodeField(node, fieldName, callback, sendMode, once, m)
    end function

    protected function unobserveNodeField(node as roSGNode, fieldName as string, callback = invalid as function)
      'TODO - we need to be a bitmore clever about observing things, as they might be going to various callbacks
      mc.tasks.cleanNodeObserver(node, fieldName)
    end function

    protected function observe(invocation as dynamic, callback as function, sendMode = "value" as string, once = false as boolean, fieldAndValueTargetField = invalid as string)
      'substituted by plugin
    end function

    protected function unobserve(invocation as dynamic, callback = invalid as function)
      'substituted by plugin
    end function

    protected function waitAFrame(callback as function, duration = 0.01 as float, sendMode = "none" as string) as roSGNode
      return mc.tasks.waitAFrame(callback, duration, sendMode, m)
    end function

    protected function cancelWaitTimer(timer as roSGNode)
      mc.tasks.cancelWaitTimer(timer)
    end function

    protected function createTask(taskType as string, fields as roAssociativeArray, callback = invalid as function, isRunning = true as boolean, sendMode = "value" as string, fieldName = "output" as string) as roSGNode
      return mc.tasks.createTask(taskType, fields, callback, isRunning, sendMode, m, fieldName)
    end function

    protected function cancelTask(task as roSGNodeTask)
      mc.tasks.cancelTask(task)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ ioc wrappers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function getInstance(name as string, path = invalid as string, defaultValue = invalid as dynamic) as dynamic
      return mioc.getInstance(name, path, defaultValue)
    end function

    protected function setInstance(field as string, instance as dynamic)
      mioc.setInstance(field, instance)
    end function

    protected function updateInstance(instanceName as string, path as string, value as dynamic)
      mioc.updateInstance(instanceName, path, value)
    end function

    protected function getClassInstance(className as string, args = [] as roArray, createTypeIfNotPresent = true as boolean, storeInstance = true as boolean) as object
      return mioc.getClassInstance(className, args, createTypeIfNotPresent, storeInstance)
    end function

    protected function createClassInstance(className as string, args = [] as roArray) as object
      return mioc.createClassInstance(className, args)
    end function

    protected function setClassInstance(instance as object)
      return mioc.setClassInstance(instance)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ long press support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function toggleLongPressTimer(interval as float)
      if interval > 0
        if m.longPressTimer = invalid
          m.longPressTimer = mc.private.getMaestroPooledComponent("Timer")
        end if
        m.longPressTimer.duration = interval
        m.longPressTimer.repeat = true
        m.observeNodeField(m.longPressTimer, "fire", m.onLongPressTimerFire, "none")
        m.longPressTimer.control = "start"

      else
        if m.longPressTimer <> invalid
          m.unobserveNodeField(m.longPressTimer, "fire", m.onLongPressTimerFire)
          m.longPressTimer.control = "stop"
          m.longPressTimer.repeat = false
          m.longPressTimer = invalid
        end if

        if m.longPressKey <> invalid and m.longPressKey <> ""
          m.log.info("finishing longPress on key ", m.longPressKey)
          'bs:disable-next-line
          if m.isLongPressStarted and mc.isFunction(onLongPressFinish)
            'bs:disable-next-line
            onLongPressFinish(m.longPressKey)
          end if
          m.longPressKey = ""
          m.isLongPressStarted = false
        end if
      end if
    end function

    protected function onLongPressTimerFire()
      if m.isLongPressStarted
        'bs:disable-next-line
        if mc.isFunction(m.onLongPressUpdate)
          'bs:disable-next-line
          if not m.onLongPressUpdate(m.longPressKey)
            m.log.info("long press was cancelled by the onLongPressUpdate call")
            if mc.isFunction(m.toggleLongPressTimer)
              m.toggleLongPressTimer(0)
            end if
          else
            'timer will keep ticking
            ' m.toggleLongPressTimer(m.longPressInterval)
          end if
        end if
      else
        'bs:disable-next-line
        if mc.isFunction(m.onLongPressStart) and not m.onLongPressStart(m.longPressKey)
          m.log.info("long press was rejected by onLongPressStart call")
          m.toggleLongPressTimer(0)
        else
          m.log.info("long press is accepted : starting for key ", m.longPressKey)
          m.isLongPressStarted = true
          'timer will keep ticking
          ' m.toggleLongPressTimer(m.longPressInterval)
        end if
      end if
    end function
  end class

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ helpers
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function onFocusIdChange(focusId as string)
    m.log.verbose("onFocusIdChange", focusId, m.top.isShown)

    if focusId <> invalid and focusId <> "" and m.top.isShown
      control = m[focusId]

      if control <> invalid
        m.log.verbose("setting focus on ", control)
        'bs:disable-next-line
        mv.setFocus(control)
      else
        m.log.error("the focus map contained a focusId that did not exist!", focusId)
      end if

    end if
  end function


  function initializeBindings()
    'bs:disable-next-line
    if mc.isFunction(m_initBindings)
      'bs:disable-next-line
      m_initBindings()
    end if

    'bs:disable-next-line
    if mc.isFunction(M_initStaticBindings)
      'bs:disable-next-line
      M_initStaticBindings()
    end if

    'bs:disable-next-line
    if mc.isFunction(onFocusIdChange)
      'bs:disable-next-line
      m.vm.observeField("focusId", onFocusIdChange)
    end if
  end function
end namespace
