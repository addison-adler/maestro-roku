import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/new-list/Row.bs"

namespace sl

  @observersWaitInitialize
  @node("NewListScreen", "mv_BaseScreen")
  class NewListScreen extends mv.BaseScreen

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @observer("onAnimatToRowIndex")
    animateToRowIndex = -1

    speed = 20

    dummyContent as mc.types.node


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'index tracking
    private index = -1
    private startIndex = -1
    private targetIndex = -1
    private currentIndex = -1

    private frameAnimation as mv.animations.Generic
    private frameTimer = createObject("roTimespan")
    private deltaTime = 0
    private lastFrameTime = 0
    private container as mc.types.node
    private rows = []


    private onScreenCells = []
    'TODO - get this from pool
    private cellsPool = []
    private updateInfoTimeout as mc.types.node
    private label as mc.types.node
    private content

    private titles = [
      "science"
      "space"
      "Engineering"
      "gadgets"
      "futurology"
      "environment"
      "ArtificialIntelligence"
      "MachineLearning"
      "compsci"
      "programming"
      "webdev"
      "cybersecurity"
      "linux"
      "softwareengineering"
      "robotics"
      "technews"
      "DataScience"
      "quantumcomputing"
      "biotech"
      "virtualreality"
      "gaming"
      "pcgaming"
      "consolegaming"
      "indiegames"
      "gameDev"
      "cybersecurity"
      "networks"
      "sysadmin"
      "hardware"
      "buildapc"
      "Bitcoin"
      "ethereum"
      "cryptocurrency"
      "investments"
      "stocks"
      "personalfinance"
      "Economics"
      "business"
      "startups"
      "marketing"
      "sciencefiction"
      "fantasy"
      "books"
      "literature"
      "writing"
      "poetry"
      "philosophy"
      "history"
      "documentaries"
      "askscience"
      "askhistorians"
      "askengineers"
      "IAmA"
      "explainlikeimfive"
      "todayilearned"
      "DIY"
      "lifehacks"
      "education"
      "learnprogramming"
      "languagelearning"
      "travel"
      "photography"
      "FoodPorn"
      "cooking"
      "fitness"
      "yoga"
      "meditation"
      "health"
      "nutrition"
      "gardening"
      "sustainability"
      "Astronomy"
      "physics"
      "chemistry"
      "biology"
      "earthscience"
      "oceanography"
      "climatology"
      "geology"
      "anthropology"
      "archaeology"
      "psychology"
      "sociology"
      "legaladvice"
      "news"
      "worldnews"
      "unpopularopinion"
      "Showerthoughts"
      "memes"
      "Jokes"
      "NoStupidQuestions"
      "OutOfTheLoop"
      "interestingasfuck"
      "mildlyinteresting"
      "Damnthatsinteresting"
      "nextfuckinglevel"
      "AmItheAsshole"
      "TIFU"
      "Advice"
      "CasualConversation"
    ]
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("ListScreen")
    end function

    protected override function initialize()
      super.initialize()
      m.log.info("Intiializing newListScreen")
      m.createViews()
      m.crateMockContent()
      m.createRows()
      m.prebakeCells()
      m.invalidateLayout()
      m.initializeFrameTimer()
      m.monitorPool()
    end function

    private function crateMockContent()
      m.content = m.createSGNode("ContentNode")
      m.dummyContent = m.createSGNode("ContentNode", invalid, "dummy")
      rows = []
      for i = 0 to 100
        row = m.createSGNode({
          _type: "ContentNode"
          title: m.titles[i]
          index: i
          state: "none"
        })
        rows.push(row)
      end for
      m.content.appendChildren(rows)
    end function

    private function monitorPool()
      m.updateInfoTimeout = m.setInterval(function()
        pool = m.global.componentPool
        m.label.text = `cells created: ${pool.numberOfComponents} in use: ${pool.numberOfComponentsInUse}`
      end function, 1)
    end function

    private function prebakeCells()
      m.log.info("Making 30 cells")

      m.global.componentPool@.prebakeComponents(30, "sl_BaseCell")
    end function

    private function createRows()
      for each child in m.content.getChildren(-1, 0)
        'these are conceptual rows - these should be created in RESPONSE to create data
        row = new sl.Row(m.top, child, m.global.componentPool)
        row.container = m.container
        m.rows.push(row)
      end for
    end function

    private function createViews()
      m.createSGNode({
        _type: "mv_Rectangle"
        size: [1920, 1080]
        color: "#000000"
      }, m.top)
      m.container = m.createSGNode("Group", m.top)
      m.createSGNode({
        _type: "mv_Rectangle"
        size: [1920, 50]
        color: "#ffffff"
      }, m.top)
      m.label = m.createSGNode({
        _type: "mv_Label"
        translation: [500, 0]
        size: [1000, 50]
        fontKey: "mediumbold,30"
        color: "#000000"
      }, m.top)
    end function

    private function initializeFrameTimer()
      m.frameAnimation = new mv.animations.Generic(m.top, 99999)
      m.frameAnimation.observeFraction(m.onFrameAnimationFraction)
      m.frameAnimation.start()
      m.animateToRowIndex = 0
      m.onAnimatToRowIndex(0)
    end function


    private function invalidateLayout()
      y = 0
      for i = 0 to m.rows.count() - 1
        m.rows[i].y = y
        y += m.rows[i].height
      end for
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onAnimatToRowIndex(index as integer)
      m.log.info("onAnimatToRowIndex ", index)
      'some consideration needed here, for what happens if we are animating
      'between row indexes and need to go to new row?

      m.startIndex = m.index
      m.targetIndex = index
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Frame Timer
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onFrameAnimationFraction(fraction as float)
      m.updateFrameTimer()
      m.performUpdates()
    end function

    private function updateFrameTimer()
      time = m.frameTimer.totalMilliseconds()
      if m.lastFrameTime > 0
        ' Calculate delta time in seconds
        m.deltaTime = (time - m.lastFrameTime) / 1000.0
      end if
      m.lastFrameTime = time
    end function

    private function performUpdates()
      'Do we need to do anything? - e.g. are we dirty?
      if m.targetIndex <> m.index
        m.animateBetweenIndexes()
      end if
    end function

    function animateBetweenIndexes() as void
      if m.targetIndex = m.startIndex ' No need to animate if indices are the same
        ? " BAILING at index"
        return
      end if

      ' Calculate target Y position
      targetY = m.targetIndex * m.rowHeight

      ' Define a constant speed (pixels per frame)
      ' Calculate the remaining distance to the target
      remainingDistance = targetY - m.virtualY

      if targetY > m.virtualY
        direction = 1
      else
        direction = -1
      end if


      ' Calculate the movement amount for this frame, ensuring it does not exceed the remaining distance
      movementAmount = direction * m.min(abs(m.speed), abs(remainingDistance))

      ' Apply the movement
      m.virtualY += movementAmount

      ' Clamp virtualY to ensure it doesn't go beyond the scrollable content
      m.virtualY = m.max(m.virtualY, 0)
      m.virtualY = m.min(m.virtualY, (m.rows.count() - 1) * m.rowHeight - m.viewportHeight)

      ' Update visible rows based on the new virtualY position
      m.updateRowVisibility()
      m.updateVisibleRows()

      ' Check if the animation has reached or is very close to the target
      if abs(m.virtualY - targetY) < 1 ' Use a small threshold to determine "completion"
        ? "FINISHED ANIMATION!!! "
        m.virtualY = targetY ' Snap to the exact target to avoid floating-point drift
        m.startIndex = m.targetIndex ' Update startIndex to reflect the animation's completion
        m.index = m.targetIndex
      end if
    end function


    private function easeOutCubic(currentTime as integer, startValue as integer, changeInValue as integer, duration as integer)
      currentTime = currentTime / duration - 1
      return changeInValue * (currentTime * currentTime * currentTime + 1) + startValue
    end function

    private viewportHeight = 1080
    private virtualY = 0
    private rowHeight = 500

    private function updateVisibleRows()
      ' Calculate the range of visible rows based on virtualY and the viewport height
      viewportHeight = 1080 ' Example, adjust based on actual viewport size
      startRow = m.virtualY / m.rowHeight
      endRow = (m.virtualY + viewportHeight) / m.rowHeight ' Last visible row index

      ' Iterate over the range of rows that should be visible
      for i = startRow to endRow
        if i >= 0 and i < m.rows.count()
          row = m.rows[i]
          ' Calculate the y position where the row should be rendered within the viewport
          ' rowY = viewportHeight - ((i * m.rowHeight) - m.virtualY)
          rowY = row.y - m.virtualY
          row.renderOnScreenAtY(rowY)
        end if
      next
    end function

    function updateRowVisibility()
      visibleRows = m.calculateVisibleRows()
      ' Loop through all rows and check their visibility status
      for rowIndex = 0 to m.rows.count() - 1
        row = m.rows[rowIndex]
        ' Check if the row is now visible and was not visible before
        m.currentIndex = visibleRows.firstVisible
        if rowIndex >= visibleRows.firstVisible and rowIndex <= visibleRows.lastVisible
          if not row.isOnScreen
            row.onEnterScreen()
            m.loadNextRows(row)
          end if
        else
          if row.isOnScreen
            row.onExitScreen()
          end if
        end if
      next
    end function

    private tasksByRowId = {}
    private function loadNextRows(lastEnteredRow as sl.Row)
      for i = lastEnteredRow.index to lastEnteredRow.index + 2
        row = m.rows[i]
        if row.content.state = "none"
          ? "going tp load row: " row.index " " row.title
          row.content.state = "loading"
          m.tasksByRowId[row.content.id] = m.createTask("GetSubReditTask", { content: row.content })
        end if
      end for
    end function

    function calculateVisibleRows() as object
      viewportHeight = 1080 ' Example, adjust based on actual viewport size
      firstVisibleRow = Int(m.virtualY / m.rowHeight)
      lastVisibleRow = Int((m.virtualY + viewportHeight) / m.rowHeight)
      return { firstVisible: firstVisibleRow, lastVisible: lastVisibleRow }
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Utils
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    private function max(a as float, b as float) as float
      if a > b
        return a
      else
        return b
      end if
    end function

    private function min(a as float, b as float) as float
      if a < b
        return a
      else
        return b
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPresses
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressRight() as boolean
      m.speed = mc.clamp(m.speed + 20, 20, 3000)
      ? " speed is now " m.speed
      return true
    end function

    private function onKeyPressLeft() as boolean
      m.speed = mc.clamp(m.speed - 20, 20, 3000)
      ? " speed is now " m.speed
      return true
    end function

    private function getLongPressIntervalForKey(key as string) as float
      return 0.5
    end function

    private function onLongPressStart(key as string) as boolean
      ? "STARTING  LONG PRESS ON " key
      if key = "up"
        m.animateToRowIndex = 0
      else
        m.animateToRowIndex = m.rows.count() - 1
      end if
      return true
    end function

    private function onLongPressFinish(key as string) as boolean
      if key = "up"
        m.animateToRowIndex = m.currentIndex - 1
      else
        m.animateToRowIndex = m.currentIndex + 1
      end if
      return true
    end function

    private function onKeyPressUp() as boolean
      m.animateToRowIndex = mc.clamp(m.animateToRowIndex - 1, 0, m.rows.count() - 1)
      ? " MOVING" m.animateToRowIndex
      return true
    end function

    private function onKeyPressDown() as boolean
      m.animateToRowIndex = mc.clamp(m.animateToRowIndex + 1, 0, m.rows.count() - 1)
      ? " MOVING DOWN " m.animateToRowIndex
      return true
    end function

    private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
      return key <> "back"
    end function

    protected override function onKeyPressBack() as boolean
      m.log.info("onKeyPressBack")
      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onFirstShow()
      super.onFirstShow()
    end function

    protected override function onShow()
      m.log.info("onShow")
      super.onShow()
    end function
  end class
end namespace
