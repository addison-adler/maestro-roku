import "pkg:/source/view/BaseScreen.bs"

@node("MVLayoutScreen", "mv_BaseScreen")
class MVLayoutScreen extends mv.BaseScreen
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private layoutGroup as roSGnode
  private controlsGroup as roSGnode
  private textInput1 as roSGnode
  private textInput2 as roSGnode
  private textInput3 as roSGnode

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("MVLayoutScreen")
  end function

  protected override function initialize()
    super.initialize()

    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/MVLayoutScreen.json")
    m.styleManager@.addStyle("MVLayoutScreen", bundle.styles)
    m.createViewsFromStyleJson(bundle.views)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onControlsGroupSelectedIndex(index as integer)
    children = m.layoutGroup@.getOriginalChildren()
    child = children[index]
    child.visible = not child.visible
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back"
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)

    if isSelfFocused
      m.setFocus(m.controlsGroup)
    end if
  end function
end class
