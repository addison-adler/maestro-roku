import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/core/Utils.bs"

@node("ButtonScreen", "mv_BaseScreen")
class ButtonScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private controlsGroup as roSGnode
  private fixedLayoutGroup as roSGnode
  private autoSizeLayoutGroup as roSGnode
  private button1 as roSGnode
  private button2 as roSGnode
  private button3 as roSGnode
  private button4 as roSGnode
  private button5 as roSGnode
  private animButton as roSGnode
  @sync
  @inject("user", "status")
  private userStatus as boolean

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private spoilersActive as boolean
  private focusableControls = []

  function new()
    super("ButtonScreen")
  end function

  protected override function initialize()
    super.initialize()

    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/ButtonScreen.json")
    m.createViewsFromStyleJson(bundle.views)
    item = {
      json: {
        title: "I SET MY TEXT WITH A DATA MAP"
      }
    }
    m.focusableControls = [m.controlsGroup, m.fixedLayoutGroup, m.autoSizeLayoutGroup]
    m.focusedControl = m.controlsGroup
    m.applyDataMapToControls(item)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onButtonIndexChange(index as integer)
    m.log.info("selected button", index)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back" and key <> "up"
  end function

  protected override function onKeyPressLeft() as boolean
    m.setFocus(mc.collections.getItemAtOffset(m.focusableControls, m.focusedControl, -1))
    return true
  end function

  protected override function onKeyPressRight() as boolean
    m.setFocus(mc.collections.getItemAtOffset(m.focusableControls, m.focusedControl, 1))
    return true
  end function

  private function onKeyPressOptions() as boolean
    m.log.info("options pressed")
    m.focusedControl@.setSelectedIndex(m.focusedControl.focusedIndex)
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)

    if isSelfFocused
      m.setFocus(m.controlsGroup)
    end if
  end function

end class
