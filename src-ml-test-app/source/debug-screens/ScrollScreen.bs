import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/Animation.bs"

@node("ScrollScreen", "mv_BaseScreen")
class ScrollScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private group as roSGnode
  private groupAnim as mv.animations.Move
  private child1 as roSGnode
  private child2 as roSGnode

  private viewIndex = 0
  private rows = []

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private posterSize = [480.0, 320.0]

  function new()
    super("ScrollScreen")
  end function

  protected override function initialize()
    super.initialize()
    m.createSGNode("mv_Rectangle", m.top, "bg", {
      size: [1920, 1080]
      color: "#000000"
    })
    m.group = m.createSGNode("Group", m.top, "group")
    m.rows = []
    for i = 1 to 50
      row = m.createSGNode("mv_Rectangle", m.group, i.toStr(), {
        size: [1000, 100]
        translation: [0, i * (m.posterSize[1] + 20)]
        color: "#ff0000"
      })
      m.rows.push(row)

      for j = 0 to 5
        cell = m.createSGNode("mv_Rectangle", row, i.toStr() + j.toStr(), {
          size: m.posterSize
          translation: [(j * m.posterSize[1]) + 20, 20]
          color: "#00ff00"
        })
        mc.createSGNode("mv_Poster", cell, "poster", {
          translation: [5, 2]
          scaleRotateCenter: [0, 0]
          loadingBitmapUri: "http://via.placeholder.com/370x300"
          failedBitmapUri: "http://via.placeholder.com/370x300"
          uri: "http://via.placeholder.com/370x300"
          loadWidth: m.posterSize[0] - 10
          loadHeight: m.posterSize[1] - 10
          size: [m.posterSize[0] - 10, m.posterSize[1] - 10]
          loadDisplayMode: "scaleToFit"
        })
      end for
    end for
    distance = 50000
    m.groupAnim = new mv.animations.Move(m.group, distance / 300, [0, 0], [0, -distance])
    m.groupAnim.observeFraction(m.onGroupFraction)
    m.groupAnim.start()

  end function

  private function onGroupFraction(fraction as float)
    ? "F " fraction " y " m.group.translation[1]
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressPlay() as boolean
    for i = 0 to 5
      row = m.rows[i]
      m.group.removeChild(row)
      row.translation = [0, -m.group.translation[1] + 200 + (i * (m.posterSize[1] + 20))]
      m.group.appendChild(row)
    end for

    return true
  end function

end class
