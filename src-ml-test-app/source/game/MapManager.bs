import "pkg:/source/core/Utils.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/game/platforms/MoveablePlatformManager.bs"
import "pkg:/source/game/MapLayer.bs"
import "pkg:/source/game/MapItemLayer.bs"

namespace mg
  @node("MapManager", "Group")
  class MapManager extends mc.BaseClass
    mapSize = [0, 0]

    private levelGroup as mc.types.node
    private playerStartPosition = [0, 0]

    'levels have different layers
    private backgroundGroup as mc.types.node
    private platformsGroup as mc.types.node
    private itemsGroup as mc.types.node
    private foregroundGroup as mc.types.node
    private tileMapLayer as mg.MapLayer
    private itemMapLayer as mg.MapItemLayer
    private mapLayers = []

    private mapX = -1
    private mapY = -1
    private startX = -1
    private startY = -1
    private endX = -1
    private endY = -1

    private screenTileWidth = 128
    private screenTileHeight = 128
    private screenHeight = 1080
    private screenWidth = 1920
    private tilesPerVisibleRow = int(m.screenWidth / m.screenTileWidth)
    private tilesPerVisibleColumn = int(m.screenHeight / m.screenTileHeight)


    private tileData = []

    function new()
      super("MapManager")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function loadMap(levelGroup as mc.types.node, file as string)
      m.levelGroup = levelGroup
      text = readAsciiFile(file)
      m.prepareLevelGroup()
      json = text = invalid ? invalid : parseJson(text)
      m.parseTMX(json)
      m.preparMapLayers()
      m.levelGroup.translation = [0, 0]
      m.renderTilesAtCurrentPosition()
    end function

    private function preparMapLayers()
      m.mapLayers = [
        m.tileMapLayer
        m.itemMapLayer,
      ]
    end function

    function renderTilesAtCurrentPosition()
      for each layer in m.mapLayers
        layer.renderTilesAtCurrentPosition()
      end for
    end function

    function getPlatformTilePoster(target as mc.types.node, ySpeed as float)
      return m.tileMapLayer.getTilePoster(target, ySpeed)
    end function

    function updateCameraView(startX as integer, startY as integer, endX as integer, endY as integer)
      m.startX = int(startX)
      m.startY = int(startY)
      m.endX = int(endX)
      m.endY = int(endY)
      m.update()
    end function

    function update() as void
      ' Retrieve current translation of levelGroup to determine which part of the map is visible
      newMapX = m.startX
      newMapY = m.startY

      ' Check if the map position has changed since the last update
      if newMapX = m.mapX and newMapY = m.mapY
        return ' If the position hasn't changed, no need to update
      end if

      ' Calculate delta changes
      deltaX = newMapX - m.mapX
      deltaY = newMapY - m.mapY

      ' Update current map positions for the next check
      m.mapX = newMapX
      m.mapY = newMapY

      ' Calculate the bounds of the previously visible area
      oldStartX = m.mapX - deltaX
      oldStartY = m.mapY - deltaY
      oldEndX = oldStartX + (m.screenWidth / m.screenTileWidth)
      oldEndY = oldStartY + (m.screenHeight / m.screenTileHeight)

      ' Calculate the bounds of the new visible area
      newStartX = m.mapX
      newStartY = m.mapY
      newEndX = newStartX + (m.screenWidth / m.screenTileWidth)
      newEndY = newStartY + (m.screenHeight / m.screenTileHeight)

      updateEvent = {
        newStartX: newStartX
        newStartY: newStartY
        newEndX: newEndX
        newEndY: newEndY
        oldStartX: oldStartX
        oldStartY: oldStartY
        oldEndX: oldEndX
        oldEndY: oldEndY
        deltaX: deltaX
        deltaY: deltaY
      }

      for each layer in m.mapLayers
        layer.update(updateEvent)
      end for
    end function

    function collectItems(target as mc.types.node)
      return m.itemMapLayer.collectItems(target)
    end function

    function getSideCollision(target as object, direction as integer) as object
      return m.tileMapLayer.getSideCollision(target, direction)
    end function

    function resetLevel()
      ? "resetting level"
      for each layer in m.mapLayers
        layer.reset()
      end for
      m.renderTilesAtCurrentPosition()
    end function

    function getPlayerStartPosition()
      return m.playerStartPosition
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function prepareLevelGroup()
      for each group in m.levelGroup.getChildren(-1, 0)
        group.removeChildren(group.getChildren(-1, 0))
      end for

      m.levelGroup.removeChildren(m.levelGroup.getChildren(-1, 0))
      m.backgroundGroup = mc.createSGNode("Group", m.levelGroup, "backgroundGroup")
      m.platformsGroup = mc.createSGNode("Group", m.levelGroup, "platformsGroup")
      m.itemsGroup = mc.createSGNode("Group", m.levelGroup, "itemsGroup")
      m.foregroundGroup = mc.createSGNode("Group", m.levelGroup, "foregroundGroup")
    end function


    private function parseTMX(tmxData as mc.types.assocarray)
      for each layerData in tmxData.layers
        if layerData.name = "foreground"
          ' m.configureMapSettings(layerData, m.foregroundGroup)

        else if layerData.name = "background"
          ' m.configureMapSettings(layerData, m.backgroundGroup)

        else if layerData.name = "platforms"
          m.configureMapSettings(layerData, m.platformsGroup)
          m.tileMapLayer = new mg.MapLayer(m.levelGroup, 200, "t_")
          m.tileMapLayer.parseData(layerData)

        else if layerData.name = "items"
          ' m.parseItemLayer(layerData, m.itemsGroup)
          m.itemMapLayer = new mg.MapItemLayer(m.itemsGroup, 200, "i_")
          m.itemMapLayer.parseData(layerData)
        else
          ? "UNKNOWN LAYER! " layerData.name
        end if
      end for
    end function

    private function configureMapSettings(layerData as mc.types.assocarray, targetNode as mc.types.node)
      m.tileData = layerData.data
      m.mapSize = [layerData.width * m.screenTileWidth, layerData.height * m.screenTileHeight]
    end function

    private function getStartPosition()
      return m.itemMapLayer.getStartPosition()
    end function

  end class
end namespace
