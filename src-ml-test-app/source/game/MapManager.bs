import "pkg:/source/core/Utils.bs"

namespace mg
  @node("MapManager", "Group")
  class MapManager
    mapSize = [0, 0]
    private platforms = []
    private levelGroup as mc.types.node
    private screenTileWidth = 128
    private screenTileHeight = 128
    private platformsByRow = []
    private itemsByRow = []
    private playerStartPosition = [0, 0]

    'levels have different layers
    private backgroundGroup as mc.types.node
    private platformsGroup as mc.types.node
    private itemsGroup as mc.types.node
    private foregroundGroup as mc.types.node

    function new()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function loadMap(levelGroup as mc.types.node, file as string)
      m.levelGroup = levelGroup
      text = readAsciiFile(file)
      m.prepareLevelGroup()
      json = text = invalid ? invalid : parseJson(text)
      m.parseTMX(json)
    end function

    function getPlatform(target as mc.types.node, ySpeed as float)
      feetCollider = target.feetCollider
      feetTranslation = feetCollider.translation
      targetTranslation = target.translation
      targetTranslation = [targetTranslation[0] + feetTranslation[0], targetTranslation[1] + feetTranslation[1]]

      currentRow = int(targetTranslation[1] / m.screenTileHeight)
      currentCol = int(targetTranslation[0] / m.screenTileWidth)

      ' Calculate the number of rows to check based on the fall speed.
      ' This accounts for the possibility of falling through multiple rows in a single frame.
      fallSpeedRows = abs(ySpeed) / m.screenTileHeight
      rowsToCheck = mc.clamp(int(fallSpeedRows), 2, 5)
      rowsToCheck = 1

      ' Check for collision in a range from the current row to the number of rows the player could have fallen through.
      for rowIndex = currentRow to currentRow + rowsToCheck
        if rowIndex < m.platformsByRow.count() and rowIndex >= 0
          for each platform in m.platformsByRow[rowIndex]
            'limit the colliders we look at
            platformStartCol = platform.startIndex - 1
            platformEndCol = platformStartCol + platform.length

            ' Determine if the target's current column intersects with the platform's column range
            if currentCol >= platformStartCol and currentCol <= platformEndCol
              collisionType = platform@.getPlatformCollision(feetCollider)
              if collisionType = mg.PlatformCollision.OnPlatform
                return platform
              end if
            end if
          end for
        end if
      end for

      return invalid
    end function

    function collectItems(target as mc.types.node)
      feetCollider = target.feetCollider
      feetTranslation = feetCollider.translation
      targetTranslation = target.translation
      targetTranslation = [targetTranslation[0] + feetTranslation[0], targetTranslation[1] + feetTranslation[1]]

      currentRow = int(targetTranslation[1] / m.screenTileHeight)
      currentCol = int(targetTranslation[0] / m.screenTileWidth)
      currentColString = currentCol.toStr()
      ' Check for collision in the current row and possibly the row below.
      for rowIndex = currentRow - 1 to currentRow
        if rowIndex < m.itemsByRow.count() and rowIndex >= 0
          item = m.itemsByRow[rowIndex][currentColString]
          if item <> invalid and not item.isCollected and item.startIndex = currentCol
            if item.effect = "kill"
              target@.onHit(item)
            else
              item.visible = false
              item.isCollected = true
            end if
          end if
        end if
      end for

      return invalid
    end function

    function getSideCollision(target as object, direction as integer) as object
      feetCollider = target.feetCollider
      feetTranslation = feetCollider.translation
      characterTranslation = target.translation
      characterPosition = [characterTranslation[0] + feetTranslation[0], characterTranslation[1] + feetTranslation[1]]

      currentRow = Int(characterPosition[1] / m.screenTileHeight)
      searchRows = [currentRow] ' Consider current row for lateral collision

      for each rowIndex in searchRows
        if rowIndex < m.platformsByRow.count() and rowIndex >= 0
          for each platform in m.platformsByRow[rowIndex]
            platformTranslation = platform.translation
            platformLeft = platformTranslation[0]
            platformRight = platformTranslation[0] + platform.width
            characterLeft = characterPosition[0]
            characterRight = characterPosition[0] + feetCollider.width

            ' Moving right and approaching the left boundary of a platform
            if direction = 1 and characterRight > platformLeft and characterLeft < platformRight
              ' Allow passing through if moving outwards from within a platform
              if characterLeft < platformLeft
                return platform ' Collision on the right
              end if

              ' Moving left and approaching the right boundary of a platform
            else if direction = -1 and characterLeft < platformRight and characterRight > platformLeft
              ' Allow passing through if moving outwards from within a platform
              if characterRight > platformRight
                return platform ' Collision on the left
              end if
            end if
          end for
        end if
      end for

      return invalid ' No collision detected, allowing free movement
    end function

    function resetLevel()
      ? "resetting level"
      for each row in m.itemsByRow
        for each item in row.items()
          item.visible = true
          item.isCollected = false
        end for
      end for
    end function

    function getPlayerStartPosition()
      return m.playerStartPosition
    end function

    function updateVisibility(playerPosition as mc.types.array)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function prepareLevelGroup()
      for each group in m.levelGroup.getChildren(-1, 0)
        group.removeChildren(group.getChildren(-1, 0))
      end for

      m.levelGroup.removeChildren(m.levelGroup.getChildren(-1, 0))
      m.backgroundGroup = mc.createSGNode("Group", m.levelGroup, "backgroundGroup")
      m.platformsGroup = mc.createSGNode("Group", m.levelGroup, "platformsGroup")
      m.itemsGroup = mc.createSGNode("Group", m.levelGroup, "itemsGroup")
      m.foregroundGroup = mc.createSGNode("Group", m.levelGroup, "foregroundGroup")
    end function

    private function parseTMX(tmxData as mc.types.assocarray)
      for each layerData in tmxData.layers
        if layerData.name = "foreground"
          m.parsePlatformLayer(layerData, m.foregroundGroup)
        else if layerData.name = "background"
          m.parsePlatformLayer(layerData, m.backgroundGroup)
        else if layerData.name = "platforms"
          m.parsePlatformLayer(layerData, m.platformsGroup)
        else if layerData.name = "items"
          m.parseItemLayer(layerData, m.itemsGroup)
        else
          ? "UNKNOWN LAYER! " layerData.name
        end if
      end for
    end function

    'TODO - we should have a finite amount of tiles.. and then reuse them as we scroll
    ' Define a function to parse TMX JSON and create platforms
    private function parsePlatformLayer(layerData as mc.types.assocarray, targetNode as mc.types.node)
      ' Loop through each layer (assuming single layer for simplicity)
      ' Assuming a single layer for simplicity, process its data
      rowData = layerData.data
      rowLength = layerData.width
      numberOfRows = layerData.height
      m.mapSize = [layerData.width * m.screenTileWidth, layerData.height * m.screenTileHeight]
      platformUri = ""

      ' Process each row
      for rowIndex = 0 to numberOfRows - 1
        rowStartIndex = rowIndex * rowLength
        rowEndIndex = (rowIndex + 1) * rowLength - 1
        startIndex = -1
        length = 0

        ' Process each tile in the row
        for tileIndex = rowStartIndex to rowEndIndex
          tileValue = rowData[tileIndex]
          ' Check if tile is not empty and start index is not set
          if tileValue > 1 and startIndex = -1
            ' ? "FOUND TILE VALUE " tileValue
            if tileValue = 8 or tileValue = 3 or tileValue = 14 or tileValue = 18 or tileValue = 12 or tileValue = 13
              'repeated tiles for efficienccy
              ' ? "REPEATED TILE"
              startIndex = tileIndex - rowStartIndex
              platformUri = `pkg:/images/tiles/${tileValue}.png`
              length = 1
            else if tileValue = 17 or tileValue = 19 or tileValue = 2 or tileValue = 4 or tileValue = 7 or tileValue = 9 or tileValue = 16 or tileValue = 20
              startIndex = tileIndex - rowStartIndex
              ? " MAKING A CAP " tileValue " id " startIndex
              platform = m.createPlatform(rowIndex, startIndex, 1, "p_" + str(startIndex))
              ' platform.visible = false
              platform.uri = `pkg:/images/tiles/${tileValue}.png`
              startIndex = -1
              length = 1
            else
              if tileValue <> 0 and tileValue <> 5 and tileValue <> 10 and tileValue <> 6
                ? " UNKNOWN TILE " tileValue
              end if
              length = 0
            end if
          else if tileValue = 8 or tileValue = 3 or tileValue = 14 or tileValue = 18 or tileValue = 12
            'repeated tiles
            length += 1
          else if length > 0 and startIndex > -1
            ' Create a platform for the sequence of non-zero tiles
            platform = m.createPlatform(rowIndex, startIndex, length, "p_" + str(startIndex))
            platform.uri = platformUri
            ' ? " making platform " platformUri
            startIndex = -1
            length = 0
          end if
        end for

        ' Check if the row ends with a platform
        if length > 0 and startIndex > -1
          ? " making platform " platformUri
          platform = m.createPlatform(rowIndex, startIndex, length, "p_" + str(startIndex))
          platform.uri = platformUri
        end if
      end for
    end function

    'TODO - we should have a finite amount of tiles.. and then reuse them as we scroll
    ' Define a function to parse TMX JSON and create platforms
    private function parseItemLayer(layerData as mc.types.assocarray, targetNode as mc.types.node)
      ' Loop through each layer (assuming single layer for simplicity)
      ' Assuming a single layer for simplicity, process its data
      rowData = layerData.data
      rowLength = layerData.width
      numberOfRows = layerData.height
      m.mapSize = [layerData.width * m.screenTileWidth, layerData.height * m.screenTileHeight]

      ' Process each row
      for rowIndex = 0 to numberOfRows - 1
        rowStartIndex = rowIndex * rowLength
        rowEndIndex = (rowIndex + 1) * rowLength - 1
        startIndex = -1

        ' Process each tile in the row
        for tileIndex = rowStartIndex to rowEndIndex
          tileValue = rowData[tileIndex]

          ' Check if tile is not empty and start index is not set
          if tileValue <> 1 and startIndex = -1
            if tileValue = 28
              ? "found player start position"
              m.setStartPosition(rowIndex, tileIndex - rowStartIndex)
              startIndex = -1
            else if tileValue = 23
              ? "COIN"
              m.createItem(rowIndex, tileIndex - rowStartIndex, "c_" + str(tileIndex), mg.GameItemType.Coin)
              startIndex = -1
            else if tileValue = 24
              ? "BAD GUY"
              m.createItem(rowIndex, tileIndex - rowStartIndex, "e1_" + str(tileIndex), mg.GameItemType.Enemy1)
              startIndex = -1
              if tileValue <> 0 and tileValue <> 5 and tileValue <> 10 and tileValue <> 6
                ? " UNKNOWN ITEM " tileValue
              end if
            end if
          end if
        end for
      end for
    end function

    private function createPlatform(rowIndex as integer, startIndex as integer, length as integer, id as string)
      yPos = rowIndex * m.screenTileHeight
      platform = mc.createSGNode({
        "_type": "Platform"
        "id": id
        translation: [startIndex * m.screenTileWidth, yPos]
        size: [length * m.screenTileWidth, m.screenTileHeight]
        startIndex: startIndex
        length: length
        rowIndex: rowIndex
        color: "#5A24B6"
      }, m.platformsGroup)
      rows = m.platformsByRow[rowIndex]
      if rows = invalid
        rows = []
        m.platformsByRow.push(rows)
      end if
      rows.push(platform)
      return platform
    end function

    private function setStartPosition(rowIndex as integer, colIndex as integer)
      yPos = rowIndex * m.screenTileHeight
      m.playerStartPosition = [colIndex * m.screenTileWidth, yPos - m.screenTileHeight + 5]
      ? " set player start pos to " m.playerStartPosition
    end function

    private function createItem(rowIndex as integer, colIndex as integer, id as string, itemType as mg.GameItemType)
      yPos = rowIndex * m.screenTileHeight
      item = mc.createSGNode({
        "_type": "GameItem"
        "id": id

        translation: [colIndex * m.screenTileWidth, yPos]
        size: [m.screenTileWidth, m.screenTileHeight]
        startIndex: colIndex
        length: 1
        effect: "kill"
        rowIndex: rowIndex
      }, m.itemsGroup)
      m.initializeGameItem(item, itemType)
      rows = m.itemsByRow[rowIndex]
      if rows = invalid
        rows = {}
        m.itemsByRow.push(rows)
      end if
      rows[colIndex.toStr()] = item
      return item
    end function

    private function initializeGameItem(item as mc.types.node, itemType as mg.GameItemType)
      if itemType = mg.GameItemType.coin
        item.uri = "pkg:/images/sprites/coin-tile.png"
        item.effect = mg.GameItemEffect.Coin
      else if itemType = mg.GameItemType.Enemy1
        item.uri = "pkg:/images/sprites/bad-guy.png"
        item.effect = mg.GameItemEffect.Kill
      else if itemType = mg.GameItemType.Enemy2
        item.uri = "pkg:/images/sprites/bad-guy.png"
        item.effect = mg.GameItemEffect.Kill
      else if itemType = mg.GameItemType.Spikes
        item.effect = mg.GameItemEffect.Kill
      else
        ? " UKNOWN GAME ITEM!!"
      end if
    end function

  end class
end namespace
