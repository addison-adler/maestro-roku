import "pkg:/source/view/BaseView.bs"
import "pkg:/source/game/GameEnums.bs"

namespace mg

  enum PlayerState
    Walking = "Walking"
    Falling = "Falling"
    Jumping = "Jumping"
    JumpSmash = "JumpSmash"
    Dead = "Dead"
    Idle = "Idle"
  end enum

  enum PlayerAnimState
    Walking = "Walking"
    Running = "Running"
  end enum

  @observersWaitInitialize
  @node("Player", "mv_BaseView")
  class Player extends mv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    mapManager as mc.types.node
    currentFloor as mc.types.node
    feetCollider as mc.types.node
    velocity = [0, 0]

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private sprite as mc.types.node
    private walkRightSprite as mc.types.node
    private walkLeftSprite as mc.types.node
    private attackLeftSprite as mc.types.node
    private attackRightSprite as mc.types.node
    private idleRightSprite as mc.types.node
    private idleLeftSprite as mc.types.node
    private jumpRightSprite as mc.types.node
    private jumpLeftSprite as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private speed = 300
    private xSpeed = 0
    private friction = 0.98
    private acceleration = 1
    private maxYSpeed = 2000
    private maxXSpeed = 1000
    private stopSpeed = 10

    @inject("gameState")
    private gameState as mc.types.node
    private deltaTime as float

    private playerState = mg.PlayerState.Idle
    ' private spriteScale = 2
    private spriteScale = 0.75
    ' private spriteScale = 0.75 * .66
    private allSprites = []
    private spritesByState = []
    private currentSprite as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("Player")
    end function

    protected override function initialize()
      super.initialize()
      m.createPlayerSprite()
      m.feetCollider = m.createSGNode({
        "_type": "mv_Rectangle"
        "width": 100
        "height": 5
        color: "#ff0000"
        visible: false
        translation: [50, 180]
      }, m.top)
      m.currentFloor = invalid
      m.setPlayerState(mg.PlayerState.Falling)
    end function

    private function createPlayerSprite_()
      m.createAnimatedSprite("walkRightSprite", "right/Run-6frm", 6, true)
      m.createAnimatedSprite("walkLeftSprite", "left/Run-6frm", 6, true)
      m.createAnimatedSprite("attackRightSprite", "right/Atk1-6frm", 6)
      m.createAnimatedSprite("attackLeftSprite", "left/Atk1-6frm", 6)
      m.createAnimatedSprite("idleRightSprite", "right/Idle-5frm", 5)
      m.createAnimatedSprite("idleLeftSprite", "left/Idle-5frm", 5)
      m.createAnimatedSprite("jumpRightSprite", "right/Jump-2frm", 2)
      m.createAnimatedSprite("jumpLeftSprite", "left/Jump-2frm", 2)


      m.allSprites = [
        m.walkRightSprite
        m.walkLeftSprite
        m.attackRightSprite
        m.attackLeftSprite
        m.idleRightSprite
        m.idleLeftSprite
        m.jumpRightSprite
        m.jumpLeftSprite
      ]
      m.spritesByState = {

      }
      m.spritesByState["right_" + mg.PlayerState.Walking] = m.walkRightSprite
      m.spritesByState["right_" + mg.PlayerState.Jumping] = m.jumpRightSprite
      m.spritesByState["right_" + mg.PlayerState.Idle] = m.idleRightSprite
      m.spritesByState["right_" + mg.PlayerState.Dead] = m.idleRightSprite
      m.spritesByState["right_" + mg.PlayerState.Falling] = m.jumpRightSprite
      m.spritesByState["left_" + mg.PlayerState.Walking] = m.walkLeftSprite
      m.spritesByState["left_" + mg.PlayerState.Jumping] = m.jumpLeftSprite
      m.spritesByState["left_" + mg.PlayerState.Idle] = m.idleLeftSprite
      m.spritesByState["left_" + mg.PlayerState.Dead] = m.idleLeftSprite
      m.spritesByState["left_" + mg.PlayerState.Falling] = m.jumpLeftSprite
    end function

    private animstate = "none"
    private function setPlayerState(state as mg.PlayerState)
      m.playerState = state
      'TODO - fix this
      animState = mg.PlayerState.Walking
      if animState <> m.animstate
        m.animstate = animState
        ' ? "SETTING STATE TO " m.playerState "  animState " animState
        ' if m.currentSprite <> invalid
        '   m.currentSprite.control = "stop"
        '   m.currentSprite.visible = false
        ' end if

        ' direction = m.xSpeed > 0 ? "right" : "left"
        ' m.currentSprite = m.spritesByState[direction + "_" + m.playerState]
        ' m.currentSprite.control = "start"
        ' m.currentSprite.visible = true
        ' ? " CURRENT SPRITE IS " m.currentSprite.id
      end if
    end function

    private function createAnimatedSprite(fieldName as string, fileName as string, numFrames as integer, repeat = false as boolean)
      sprite = m.top.createChild("ap_AnimatedPoster")
      sprite.width = 244 * m.spriteScale
      sprite.height = 93 * m.spriteScale
      sprite.id = fieldName
      sprite.scale = [m.spriteScale, m.spriteScale]
      sprite.spriteSheetUri = "pkg:/images/sprites/" + fileName + ".png"
      sprite.visible = false
      sprite.loopMode = repeat ? "loop" : "once"

      frameOffsets = []
      for i = 0 to numFrames - 1
        frameOffsets.push([(244 * i), 0])
      end for

      sprite.frameOffsets = frameOffsets
      sprite.duration = 0.3
      m[fieldName] = sprite
    end function

    private spriteLeft as mc.types.node
    private function createPlayerSprite()
      m.sprite = m.top.createChild("ap_AnimatedPoster")
      m.sprite.width = 240
      m.sprite.height = 240
      m.sprite.scale = [m.spriteScale, m.spriteScale]
      m.sprite.spriteSheetUri = "pkg:/images/sprites/player-run-fhd.png"
      ' m.sprite.spriteSheetUri = "pkg:/images/sprites/player-run.png"

      m.sprite.frameOffsets = [
        [0, 0]
        [240, 0]
        [480, 0]
        [720, 0]
        [960, 0]
        [1200, 0]
      ]
      m.sprite.duration = 0.15
      m.sprite.control = "start"
      m.spriteLeft = m.top.createChild("ap_AnimatedPoster")
      m.spriteLeft.width = 240
      m.spriteLeft.height = 240
      m.spriteLeft.scale = [m.spriteScale, m.spriteScale]
      m.spriteLeft.spriteSheetUri = "pkg:/images/sprites/player-run-left-fhd.png"
      ' m.spriteLeft.spriteSheetUri = "pkg:/images/sprites/player-run-left.png"

      m.spriteLeft.frameOffsets = [
        [0, 0]
        [240, 0]
        [480, 0]
        [720, 0]
        [960, 0]
        [1200, 0]
      ]
      m.spriteLeft.duration = 0.15
      m.spriteLeft.control = "start"
      m.spriteLeft.visible = false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function tick()
      ' Update deltaTime in each tick
      m.deltaTime = m.gameState.deltaTime

      m.onInput()
      m.applyGravity()
      m.checkLateralCollision()
      m.collectItems()
      m.updateMovement()
    end function

    private function checkLateralCollision()
      ' Check for lateral collisions and adjust movement
      lateralCollisionPlatform = m.mapManager@.getSideCollision(m.top, m.xSpeed > 0 ? 1 : -1)
      if lateralCollisionPlatform <> invalid and (not lateralCollisionPlatform.isSameNode(m.currentFloor))
        ' ? "Hit wall " lateralCollisionPlatform.rowIndex
        m.xSpeed = 0 ' Example adjustment, customize as needed
      end if
    end function


    private jumpHoldTime as float = 0
    minJumpHoldTime as float = 0.1 ' Min time that we ignore it
    maxJumpHoldTime as float = 1 ' Maximum time the jump force is applied when holding the "up" key

    initialRunSpeed as float = 100 ' Increase for a faster initial jump
    initialJumpSpeed as float = 800 ' Increase for a faster initial jump
    gravity as float = 1800 ' Adjust based on testing for desired jump arc
    jumpHoldForce as float = 1000 ' Increase this force for a stronger sustained jump when holding the button

    private ySpeed = 0

    private function applyGravity()
      ' Apply gravity if in the air
      if m.playerState = mg.PlayerState.Jumping or m.playerState = mg.PlayerState.Falling
        m.ySpeed = m.ySpeed + (m.gravity * m.deltaTime)
        ' Move vertically based on ySpeed
        m.currentFloor = m.getFloor()
        if m.currentFloor <> invalid
          ' ? " LANDED ON FLOOR " m.currentFloor.rowIndex
          m.top.translation[1] = m.currentFloor.translation[1] - (m.feetCollider.translation[1] + m.feetCollider.height)
          m.ySpeed = 0
          m.setPlayerState(m.xSpeed = 0 ? mg.PlayerState.Idle : mg.PlayerState.Walking) ' Or Walking, depending on context
        end if
      else
        m.currentFloor = m.getFloor()
        if m.currentFloor = invalid
          m.startFalling()
        end if
      end if

    end function

    private function startFalling()
      ' ? "starting falling"
      m.setPlayerState(mg.PlayerState.Falling)
      m.ySpeed = m.ySpeed + (m.gravity * m.deltaTime)
    end function

    ' private function getFloor()
    '   if m.ySpeed < 0
    '     ' ? "Rising"
    '   else
    '     ' ? "Falling"
    '     for each platform in m.mapManager.platformsGroup.getChildren(-1, 0)
    '       collisionType = platform@.getFloorCollision(m.feetCollider)
    '       if collisionType = mg.FloorCollision.OnFloor
    '         return platform
    '       end if
    '     end for
    '   end if
    '   return invalid
    ' end function

    private startSpeed = 40

    private function getFloor()
      if m.ySpeed < 0
        ' ? "Rising"
      else
        ' ? "Falling"
        ' Calculate current row based on the character's feet Y position and platform height.
        ' Assuming platformHeight is a constant that you have defined somewhere.
        return m.mapManager@.getFloor(m.top, m.ySpeed)
      end if
      return invalid
    end function

    private function collectItems()
      return m.mapManager@.collectItems(m.top)
    end function

    function onHit(enemy as mc.types.node)
      m.resetPlayer()
    end function

    function resetPlayer()
      m.top.translation = [300, 300]
      m.setPlayerState(mg.PlayerState.Idle)
      m.mapManager@.resetLevel()
      m.currentFloor = invalid
      m.ySpeed = 0
      m.xSpeed = 0
      m.setPlayerState(mg.PlayerState.Idle)
    end function

    private function onInput()
      if m.gameState.isKeyDown
        pressedKey = m.gameState.pressedKey

        if pressedKey = "play"
          m.resetPlayer()
        else if pressedKey = "down" and (m.playerState = mg.PlayerState.Jumping or m.playerState = mg.PlayerState.Falling)
          m.ySpeed = m.maxYSpeed
          m.xSpeed = 0
        else if pressedKey = "up"
          if m.currentFloor <> invalid
            m.setPlayerState(mg.PlayerState.Jumping)
            m.currentFloor = invalid
            m.ySpeed = -m.initialJumpSpeed
            m.jumpHoldTime = 0 ' Reset jump hold time
          else if m.playerState = mg.PlayerState.Jumping and m.jumpHoldTime < m.maxJumpHoldTime
            ' Continue applying jump hold force if in jumping state and holding "up"
            m.jumpHoldTime = m.jumpHoldTime + m.deltaTime
            ' Only apply additional force if within the max jump hold time
            if m.jumpHoldTime <= m.maxJumpHoldTime and m.jumpHoldTime >= m.minJumpHoldTime
              m.ySpeed -= (m.jumpHoldForce * m.deltaTime) ' Apply additional upward force
            end if
          end if
        else
          ' Calculate speed change based on current input
          speedDelta = m.speed * m.deltaTime * m.acceleration

          ' Introduce a boost for initial movement to make the start or turn faster
          initialSpeedBoost = 20 ' Adjust this value as needed for the desired effect


          ' Determine direction change for immediate response
          if pressedKey = "left" or pressedKey = "right"
            m.sprite.visible = pressedKey = "right"
            m.spriteLeft.visible = pressedKey = "left"

            directionMultiplier = 1
            if (pressedKey = "left" and m.xSpeed > 0) or (pressedKey = "right" and m.xSpeed < 0)
              ' Increase direction change impact when switching directions
              directionMultiplier = 40
            else if abs(m.xSpeed) < m.startSpeed ' Check if starting from low velocity
              ' Apply an initial boost to the speed when starting to move
              speedDelta += initialSpeedBoost
            end if

            ' Update xSpeed with direction change consideration and possible boost
            if pressedKey = "left"
              m.xSpeed -= speedDelta * directionMultiplier
            else if pressedKey = "right"
              m.xSpeed += speedDelta * directionMultiplier
            end if
          end if
        end if
      else
        m.jumpHoldTime = 0

        'friction comes from floor!!
        if m.currentFloor <> invalid
          ' Apply friction to gradually stop the movement when no key is pressed
          m.xSpeed = m.xSpeed * (1 - m.friction * m.deltaTime)
          if abs(m.xSpeed) < m.stopSpeed
            m.xSpeed = 0
          end if
        end if
      end if
    end function

    private function updateMovement()

      ' Ensure xSpeed and ySpeed do not exceed the maximum speed
      m.xSpeed = mc.Clamp(m.xSpeed, -m.maxXSpeed, m.maxXSpeed)
      m.ySpeed = mc.Clamp(m.ySpeed, -m.maxYSpeed, m.maxYSpeed)

      ' Move the view based on current speeds
      m.moveView(m.top, m.xSpeed, m.ySpeed)

      m.velocity = [m.xSpeed, m.ySpeed]
    end function

    private function moveView(target as mc.types.node, xSpeed as float, ySpeed as float)
      if m.currentFloor <> invalid
        y = m.currentFloor.translation[1] - (m.feetCollider.translation[1] + m.feetCollider.height)
      else
        y = target.translation[1] + (ySpeed * m.deltaTime)
      end if
      target.translation = [target.translation[0] + (xSpeed * m.deltaTime), y]
    end function

    function max(value1 as float, value2 as float) as float
      if value1 > value2
        return value1
      else
        return value2
      end if
    end function

    function min(value1 as float, value2 as float) as float
      if value1 < value2
        return value1
      else
        return value2
      end if
    end function
  end class

end namespace
