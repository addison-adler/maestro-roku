import "pkg:/source/view/NodeClass.bs"
import "pkg:/source/game/TextEffect.bs"

namespace mg
  @node("EffectManager", "mv_BaseView")
  class EffectManager extends mv.NodeClass
    container as mc.types.node
    private allTextEffects = []
    private activeTextEffects = {}
    private activeEffectIndex = 0
    private currentTime = 0

    function new()
      super("EffectManager")
    end function

    protected override function initialize()
      super.initialize()
      m.createEffects()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function showText(target as mc.types.node, text as string, duration as integer, color as string)
      effect = m.allTextEffects[m.activeEffectIndex]
      m.activeEffectIndex = mc.clamp(m.activeEffectIndex + 1, 0, m.allTextEffects.count() - 1)
      m.activeTextEffects[effect.id] = effect
      effect.showText(target, text, duration, color)
    end function

    function tick(deltaTime as integer)
      for each id in m.activeTextEffects
        effect = m.activeTextEffects[id]
        effect.tick(deltaTime)
        if not effect.isActive
          m.activeTextEffects.delete(id)
        end if
      end for
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createEffects()
      for i = 0 to 10
        m.allTextEffects.push(new mg.TextEffect(m.container, i.toStr()))
      end for
    end function

  end class
end namespace
