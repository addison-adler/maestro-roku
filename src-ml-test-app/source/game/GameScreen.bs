import "pkg:/source/view/BaseScreen.bs"
import "../view/Animation.bs"
import "pkg:/source/game/MapBuilder.bs"

namespace mg

  @observersWaitInitialize
  @node("GameScreen", "mv_BaseView")
  class GameScreen extends mv.BaseScreen

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private levelGroup as mc.types.node
    private bg1 as mc.types.node
    private player as mc.types.node
    private bg2 as mc.types.node
    private bgScale as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private animatedPosters
    private gameAnim
    private bgSpeed = 80

    @gameEngine
    private gameState as mc.types.node
    @gameEngine
    private frameTimer = createObject("roTimespan")


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("GameScreen")
    end function

    protected override function initialize()
      super.initialize()
      m.createGameState()
      m.createViews()
      ' m.setInterval(m.updateBackground, 3)
    end function

    private function createGameState()
      m.gameState = m.createSGNode({
        "_type": "GameState"
      }, m.top)
      m.setInstance("gameState", m.gameState)
    end function

    private function createViews()
      bundle = m.styleManager@.loadBundle("pkg:/source/game/GameScreen.json")
      m.createViewsFromStyleJson(bundle.views, m.top)
      m.createBackground("bg1", 0)
      m.createBackground("bg2", 1919)
      m.levelGroup = m.createSGNode("Group", m.top)
      m.gameAnim = new mv.animations.Generic(m.levelGroup, 999999)
      m.gameAnim.observeFraction(m.onGameAnimFraction)
      m.gameAnim.start()
      m.createLevel()
    end function

    private function createBackground(id as string, offset as float)
      m[id] = m.createSGNode({
        "_type": "mv_Poster"
        "id": id
        "uri": "pkg:/images/roku-city.jpeg"
        "translation": [offset * m.bgScale, 0]
        "size": [1920, 1080]
        "scale": [m.bgScale, m.bgScale]
      }, m.top)
    end function


    @gameEngine
    private function onGameAnimFraction(fraction as float)
      m.updateFrameTimer()
      ' ? "DELTA " m.deltaTime
      m.runGameLoop()
    end function

    @gameEngine
    private function runGameLoop()
      m.updateBackground()
      m.onInput()
      m.tick()
      m.updateCamera()
      m.resetKeyStates()
    end function

    private function tick()
      m.player@.tick()
    end function

    private function updateCamera()
      playerTranslation = m.player.translation
      screenSize = [1920, 1080]
      levelSize = [4000, 2000]

      ' Calculate the desired camera position
      ' This example centers the player on the screen, adjust the values as needed
      desiredX = - (playerTranslation[0] - screenSize[0] / 2)
      desiredY = - (playerTranslation[1] - screenSize[1] / 2)

      ' Optional: Set limits to prevent showing areas outside your game world
      ' For example, if your level is 4000 pixels wide:
      minX = - (levelSize[0] - screenSize[0])
      maxX = 0
      minY = - (levelSize[1] - screenSize[1]) ' Assuming the level height is 2000 pixels
      maxY = 0

      ' Apply limits
      desiredX = mc.clamp(desiredX, minX, maxX)
      desiredY = mc.clamp(desiredY, minY, maxY)

      ' Update the levelGroup translation to move the camera
      m.levelGroup.translation = [desiredX, desiredY]
    end function

    @gameEngine
    private function updateFrameTimer()
      time = m.frameTimer.totalMilliseconds()
      if m.gameState.lastAnimTime > 0
        ' Calculate delta time in seconds
        m.gameState.deltaTime = (time - m.gameState.lastAnimTime) / 1000.0
      end if
      m.gameState.lastAnimTime = time
    end function

    private function createLevel()
      m.createMap()

      m.player = m.createSGNode({
        "_type": "Player"
        translation: [300, 300]
        platformsGroup: m.platformsGroup
      }, m.levelGroup)
    end function

    private platformsGroup as mc.types.node
    private platforms = []
    private mapBuilder

    private function createMap()
      m.platformsGroup = m.createSGNode("Group", m.levelGroup)
      m.mapBuilder = new mg.MapBuilder(m.platformsGroup)

      level = [
        ["0000000XXXXXXXXX00000000XXXXXXXXXXX000000000XXXXXXXXXXX000000XXXXX"]
        ["000000000000000000000000000000000000000000000000000000000000000000"]
        ["0000000XXXXXXXXX00000000XXXXXXXXXXX000000000XXXXXXXXXXX000000XXXXX"]
      ]
    end function

    @gameEngine
    private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
      m.gameState.pressedKey = key
      m.gameState.isPressStart = press and not m.gameState.isKeyDown
      m.gameState.isPressFinish = not m.gameState.isKeyDown and not m.gameState.isPressFinish
      m.gameState.isKeyDown = press
      return key <> "back"
    end function

    @gameEngine
    private function resetKeyStates()
      m.gameState.isPressStart = false
      m.gameState.isPressFinish = false
      m.gameState.isLongPress = m.gameState.isKeyDown
    end function

    private function onInput()
      ' ? "KD " m.gameState.isKeyDown " K " m.pressedKey " start " m.gameState.isPressStart " LP " m.gameState.isLongPress
      if m.gameState.isPressStart
        if m.gameState.pressedKey = "OK"
          ' ? "BOOST!"
          m.bgSpeed += 80
          if m.bgSpeed > 1300
            m.bgSpeed = 50
          end if
        end if
      end if
    end function

    'this is for parallax scrolling/bg effects
    private function updateBackground() as boolean
      m.moveBackground(m.bg1, -m.bgSpeed)
      m.moveBackground(m.bg2, -m.bgSpeed)
      return true
    end function

    private function moveBackground(target as mc.types.node, speed as float)
      newPos = [target.translation[0] + (speed * m.gameState.deltaTime), target.translation[1]]
      if target.id = "bg1" and newPos[0] <= -1919
        newPos = [0, 0]
      else if target.id = "bg2" and newPos[0] <= -0
        newPos = [1919, 0]
      end if
      target.translation = newPos
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onFirstShow()
      super.onFirstShow()
    end function

    protected override function onShow()
      m.log.info("onShow")
      super.onShow()
    end function

  end class
end namespace
