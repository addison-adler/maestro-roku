import "pkg:/source/view/BaseScreen.bs"
import "../view/Animation.bs"
import "pkg:/source/game/MapManager.bs"
import "pkg:/source/game/EffectManager.bs"

namespace mg

  @observersWaitInitialize
  @node("GameScreen", "mv_BaseView")
  class GameScreen extends mv.BaseScreen

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private levelGroup as mc.types.node
    private backgroundGroup as mc.types.node
    private midGroundGroup as mc.types.node
    private foregroundGroup as mc.types.node
    private player as mc.types.node
    private bg1 as mc.types.node
    private bg2 as mc.types.node
    private bgScale = 1.5
    private minLevelScale = 0.75

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private deltaTime
    private animatedPosters
    private gameAnim
    private bgSpeed = 80
    private levelSize = 80
    private isMapMovingMode = false

    @gameEngine
    private gameState as mc.types.node
    @gameEngine
    private frameTimer = createObject("roTimespan")

    private effectManager as mc.types.node

    private video as mc.types.node

    private mapX = 0
    private mapY = 0

    'camera zoom
    private levelScale as float = 1.0
    private targetScale as float = 1.0
    private scaleSpeed as float = 0.2
    private scaleSpeedMod as float = 0

    private currentSoundChannel = 0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("GameScreen")
    end function

    protected override function initialize()
      super.initialize()
      m.createGameState()
      m.createViews()
      ' m.setInterval(m.updateBackground, 3)
    end function

    function playSound(soundName as string, volume = 100 as integer)
      m.top.getScene().playSound = {
        "name": soundName
        "volume": volume
      }
    end function

    private function createGameState()
      m.gameState = m.createSGNode({
        "_type": "GameState"
      }, m.top)
      m.setInstance("gameState", m.gameState)
    end function

    private function createViews()
      m.createParallaxBackgrounds()

      m.createLevel()
    end function

    function createVideoPlayer() as void
      videoContent = createObject("RoSGNode", "ContentNode")
      videoContent.url = "https://roku.s.cpl.delvenetworks.com/media/59021fabe3b645968e382ac726cd6c7b/60b4a471ffb74809beb2f7d5a15b3193/roku_ep_111_segment_1_final-cc_mix_033015-a7ec8a288c4bcec001c118181c668de321108861.m3u8"
      videoContent.title = "Test Video"
      videoContent.streamformat = "hls"

      m.video = m.createSGNode({
        _type: "Video"
        translation: [500, 1400]
        width: 640
        height: 480
        enableUI: false
        enableTrickPlay: false
      }, m.platformsGroup)
      m.video.content = videoContent
      ' m.video.control = "play"
    end function

    private contentGroup as mc.types.node
    private function createParallaxBackgrounds()
      m.contentGroup = m.createSGNode("Group", m.top)
      ' m.contentGroup.scale = [0.8, 0.8]
      m.backgroundGroup = m.createSGNode("Group", m.contentGroup)
      m.midGroundGroup = m.createSGNode("Group", m.contentGroup)
      m.createSGNode({
        "_type": "mv_Poster"
        "id": "midGroundPoster"
        "uri": "pkg:/images/roku-city-mid.png"
        "translation": [500, 00]
        "size": [1920, 1080]
        "scale": [1.3, 1.3]
      }, m.midGroundGroup)
      m.createBackground("bg1", 0, "pkg:/images/roku-city.jpeg")
      m.createBackground("bg2", 1919 * m.bgScale, "pkg:/images/roku-city.jpeg")
      m.foregroundGroup = m.createSGNode("Group", m.contentGroup)
      m.createSGNode({
        "_type": "mv_Poster"
        "id": "foregroundPoster"
        "uri": "pkg:/images/roku-city-foreground.png"
        "translation": [1400, -1200]
        "size": [1920, 1080]
        "scale": [2, 2]
      }, m.foregroundGroup)
    end function

    private function createBackground(id as string, offset as float, uri as string)
      m[id] = m.createSGNode({
        "_type": "mv_Poster"
        "id": id
        "uri": uri
        "translation": [offset * m.bgScale, 0]
        "size": [1920, 1080]
        "scale": [m.bgScale, m.bgScale]
      }, m.backgroundGroup)
    end function


    @gameEngine
    private function onGameAnimFraction(fraction as float)
      m.updateFrameTimer()
      ' ? "DELTA " m.deltaTime
      m.runGameLoop()
    end function

    @gameEngine
    private function runGameLoop()
      ' m.updateBackground()
      m.onInput()
      m.tick()
      m.updateCameraScale(m.gameState.deltaTime)
      m.updateCamera()
      ' m.updateGameItems()
      m.updateParallax()

      m.resetKeyStates()
    end function

    private function updateParallax()
      ' Get the current camera position from the level group's translation
      levelTranslation = m.levelGroup.translation
      cameraX = levelTranslation[0] * 0.8
      cameraY = levelTranslation[1] * 0.8

      foregroundarallaxFactor = 0.3
      midParallaxFactor = 0.25
      backParallaxFactor = 0.12

      foreX = cameraX * foregroundarallaxFactor
      foreY = cameraY * foregroundarallaxFactor
      midX = cameraX * midParallaxFactor
      midY = cameraY * midParallaxFactor
      backX = cameraX * backParallaxFactor
      backY = cameraY * backParallaxFactor

      ' Update the midground and background layer positions
      ' Assuming you have m.midgroundLayer and m.backgroundLayer to represent your layers
      m.midGroundGroup.translation = [midX, midY]
      m.backgroundGroup.translation = [backX, backY]
      m.foregroundGroup.translation = [foreX, foreY]
    end function

    private function tick()
      m.player@.tick()
      m.mapManager@.fixBrokenPosition(m.player)
      m.effectManager@.tick(m.deltaTime)
    end function

    private function updateCamera() as void

      playerTranslation = m.player.translation
      playerTranslation[0] = playerTranslation[0] * m.levelScale
      playerTranslation[1] = playerTranslation[1] * m.levelScale
      ' screenSize = [1920, 1080]
      screenSize = [1920, 1080]


      ' Calculate the desired camera position
      ' This example centers the player on the screen, adjust the values as needed
      desiredX = - (playerTranslation[0] - screenSize[0] / 2)
      desiredY = - (playerTranslation[1] - screenSize[1] / 2)

      ' Optional: Set limits to prevent showing areas outside your game world
      ' For example, if your level is 4000 pixels wide:
      minX = - (m.levelSize[0] - screenSize[0])
      maxX = 0
      minY = - (m.levelSize[1] - screenSize[1]) ' Assuming the level height is 2000 pixels
      maxY = 0

      ' Apply limits
      desiredX = mc.clamp(desiredX, minX, maxX)
      desiredY = mc.clamp(desiredY, minY, maxY)

      if m.isMapMovingMode
        'we are in god mode - so make the player move to mapX, mapY with 100 px and 200 px offset
        m.player.translation = [m.mapX * 128 + 100, m.mapY * 128 + 200]
        return
      end if
      ' Update the levelGroup translation to move the camera
      m.levelGroup.translation = [desiredX, desiredY]
      ' Calculate visible tile ranges
      ' startX = -desiredX / m.screenTileWidth
      ' startY = -desiredY / m.screenTileHeight
      startX = -desiredX / 128
      startY = -desiredY / 128
      endX = int(startX + screenSize[0] / 128)
      endY = startY + screenSize[1] / 128
      if not m.isMapMovingMode
        m.mapManager@.updateCameraView(startX, startY, endX, endY)
      end if
    end function

    @gameEngine
    private function updateFrameTimer()
      time = m.frameTimer.totalMilliseconds()
      if m.gameState.lastAnimTime > 0
        ' Calculate delta time in seconds
        m.deltaTime = (time - m.gameState.lastAnimTime) / 1000.0
        m.gameState.deltaTime = m.deltaTime
      end if
      m.gameState.lastAnimTime = time
    end function


    private function updateGameItems()
      'TODO - work out where video plyayers and items that need activating are
      'if the players position is within the video player screen area, play
      'if not pause
      translation = m.player.translation
      if translation[0] < 1000 and translation[1] < 2000 and translation[1] > 200
        if m.video.control <> "play"
          m.video.control = "play"
        end if
      else
        if m.video.control <> "pause"
          m.video.control = "pause"
        end if
      end if
    end function
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Camera zoom out
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function updateCameraScale(deltaTime as float)
      ' Adjust the level scale based on the player's x speed
      m.adjustLevelScaleBasedOnPlayerSpeed()

      ' Smoothly interpolate the current level scale towards the target scale
      m.levelScale += (m.targetScale - m.levelScale) * (m.scaleSpeed + m.scaleSpeedMod) * deltaTime

      ' Ensure the levelScale is clamped between a minimum scale and 1
      m.levelScale = mc.clamp(m.levelScale, m.minLevelScale, 1.0)

      ' Apply the level scale to the game level or camera
      m.applyLevelScale(m.levelScale)
    end function

    private function adjustLevelScaleBasedOnPlayerSpeed()
      ' Example calculation for target scale based on player's x velocity
      ' This is a simple mapping, consider a more complex function for smoother transitions
      xSpeed = abs(m.player.velocity[0]) ' Consider the absolute value to handle both directions

      ' ? "PLAYER SPEED IS " xSpeed
      if xSpeed > 800
        m.targetScale = m.minLevelScale ' Scale down if x speed is high
        m.scaleSpeedMod = 0
      else
        m.targetScale = 1.0 ' Scale back to normal
        m.scaleSpeedMod = 0.95
      end if
    end function

    private function applyLevelScale(scale as float)
      m.levelGroup.scale = [scale, scale]
      m.mapManager.levelScale = m.levelScale
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Level Creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createLevel()
      m.levelGroup = m.createSGNode("Group", m.contentGroup, "levelGroup")
      ' m.levelGroup.scale = [0.8, 0.8]

      m.createMap()

      'run  main game loop at 60fps
      m.gameAnim = new mv.animations.Generic(m.levelGroup, 999999)
      m.gameAnim.observeFraction(m.onGameAnimFraction)
      m.gameAnim.start()


      m.player = m.createSGNode({
        "_type": "Player"
        translation: m.mapManager@.getPlayerStartPosition()
        mapManager: m.mapManager
      }, m.levelGroup, "player")
      m.gameState.player = m.player
      m.effectManager = m.createSGNode({
        "_type": "EffectManager"
        "id": "effectManager"
        container: m.levelGroup
      }, m.top)
      m.player.effectManager = m.effectManager
    end function

    private platformsGroup as mc.types.node
    private platforms = []
    private mapManager as mc.types.node

    private function createMap()
      m.platformsGroup = m.createSGNode("Group", m.levelGroup)
      m.mapManager = m.createSGNode("MapManager")
      ' m.mapManager@.loadMap(m.platformsGroup, "pkg:/images/map/map.json")
      m.mapManager@.loadMap(m.platformsGroup, "pkg:/images/map/level1.json")
      m.levelSize = m.mapManager.mapSize

      ' m.createVideoPlayer()
    end function

    @gameEngine
    private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
      m.gameState.pressedKey = key
      m.gameState.isPressStart = press and not m.gameState.isKeyDown
      m.gameState.isPressFinish = not m.gameState.isKeyDown and not m.gameState.isPressFinish
      m.gameState.isKeyDown = press
      return key <> "back"
    end function

    @gameEngine
    private function resetKeyStates()
      m.gameState.isPressStart = false
      m.gameState.isPressFinish = false
      m.gameState.isLongPress = m.gameState.isKeyDown
    end function

    private function onInput()
      ' ? "KD " m.gameState.isKeyDown " K " m.pressedKey " start " m.gameState.isPressStart " LP " m.gameState.isLongPress
      if m.gameState.isPressStart
        if m.gameState.pressedKey = "options"
          m.isMapMovingMode = not m.isMapMovingMode
          m.player.isInputEnabled = not m.isMapMovingMode
          m.log.info("setting mapMoving mode to", m.isMapMovingMode)
        end if
        if m.gameState.pressedKey = "OK"
          ' ? "BOOST!"
          m.bgSpeed += 80
          if m.bgSpeed > 1300
            m.bgSpeed = 50
          end if
        end if
      end if
      if m.isMapMovingMode
        m.onMapInput()
      end if
    end function

    private function onMapInput()
      if m.gameState.isKeyDown
        pressedKey = m.gameState.pressedKey

        if pressedKey = "down"
          m.mapY++
        else if pressedKey = "up"
          m.mapY--
        else if pressedKey = "left"
          m.mapX--
        else if pressedKey = "right"
          m.mapX++
        end if
      end if

      m.mapManager@.updateCameraView(m.mapX, m.mapY, m.mapX + (1920 / 128), m.mapY + (1080 / 128))
      m.levelGroup.translation = [m.mapX * -128, m.mapY * -128]
    end function


    'this is for parallax scrolling/bg effects
    ' private function updateBackground() as boolean
    '   m.moveBackground(m.bg1, -m.bgSpeed)
    '   m.moveBackground(m.bg2, -m.bgSpeed)
    '   return true
    ' end function

    ' private function moveBackground(target as mc.types.node, speed as float)
    '   newPos = [target.translation[0] + (speed * m.gameState.deltaTime), target.translation[1]]
    '   if target.id = "bg1" and newPos[0] <= -1919
    '     newPos = [0, 0]
    '   else if target.id = "bg2" and newPos[0] <= -0
    '     newPos = [1919, 0]
    '   end if
    '   target.translation = newPos
    ' end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onFirstShow()
      super.onFirstShow()
    end function

    protected override function onShow()
      m.log.info("onShow")
      super.onShow()
    end function

  end class
end namespace
