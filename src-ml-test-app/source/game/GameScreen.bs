import "pkg:/source/view/BaseScreen.bs"
import "../view/Animation.bs"
import "pkg:/source/game/MapManager.bs"

namespace mg

  @observersWaitInitialize
  @node("GameScreen", "mv_BaseView")
  class GameScreen extends mv.BaseScreen

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private levelGroup as mc.types.node
    private backgroundGroup as mc.types.node
    private midGroundGroup as mc.types.node
    private foregroundGroup as mc.types.node
    private player as mc.types.node
    private bg1 as mc.types.node
    private bg2 as mc.types.node
    private bgScale = 1.5

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private animatedPosters
    private gameAnim
    private bgSpeed = 80
    private levelSize = 80

    @gameEngine
    private gameState as mc.types.node
    @gameEngine
    private frameTimer = createObject("roTimespan")


    'video playing experiment - ignore
    private video as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("GameScreen")
    end function

    protected override function initialize()
      super.initialize()
      m.createGameState()
      m.createViews()
    end function

    private function createGameState()
      m.gameState = m.createSGNode({
        "_type": "GameState"
      }, m.top)
      m.setInstance("gameState", m.gameState)
    end function

    private function createViews()
      m.createParallaxBackgrounds()

      m.createLevel()
    end function


    function createVideoPlayer() as void
      videoContent = createObject("RoSGNode", "ContentNode")
      videoContent.url = "https://roku.s.cpl.delvenetworks.com/media/59021fabe3b645968e382ac726cd6c7b/60b4a471ffb74809beb2f7d5a15b3193/roku_ep_111_segment_1_final-cc_mix_033015-a7ec8a288c4bcec001c118181c668de321108861.m3u8"
      videoContent.title = "Test Video"
      videoContent.streamformat = "hls"

      m.video = m.createSGNode({
        _type: "Video"
        translation: [4000, 500]
        width: 640
        height: 480
        enableUI: false
        enableTrickPlay: false
      }, m.platformsGroup)
      m.video.content = videoContent
      m.video.control = "play"
    end function

    private contentGroup as mc.types.node
    private function createParallaxBackgrounds()
      m.contentGroup = m.createSGNode("Group", m.top)
      m.backgroundGroup = m.createSGNode("Group", m.contentGroup)
      m.midGroundGroup = m.createSGNode("Group", m.contentGroup)
      m.createSGNode({
        "_type": "mv_Poster"
        "id": "midGroundPoster"
        "uri": "pkg:/images/roku-city-mid.png"
        "translation": [500, 00]
        "size": [1920, 1080]
        "scale": [1.3, 1.3]
      }, m.midGroundGroup)
      m.createBackground("bg1", 0, "pkg:/images/roku-city.jpeg")
      m.createBackground("bg2", 1919 * m.bgScale, "pkg:/images/roku-city.jpeg")
      m.foregroundGroup = m.createSGNode("Group", m.contentGroup)
      m.createSGNode({
        "_type": "mv_Poster"
        "id": "foregroundPoster"
        "uri": "pkg:/images/roku-city-foreground.png"
        "translation": [1400, -1200]
        "size": [1920, 1080]
        "scale": [2, 2]
      }, m.foregroundGroup)
    end function

    private function createBackground(id as string, offset as float, uri as string)
      m[id] = m.createSGNode({
        "_type": "mv_Poster"
        "id": id
        "uri": uri
        "translation": [offset * m.bgScale, 0]
        "size": [1920, 1080]
        "scale": [m.bgScale, m.bgScale]
      }, m.backgroundGroup)
    end function


    @gameEngine
    private function onGameAnimFraction(fraction as float)
      m.updateFrameTimer()
      ' ? "DELTA " m.deltaTime
      m.runGameLoop()
    end function

    @gameEngine
    private function runGameLoop()
      m.onInput()
      m.tick()
      m.updateCameraScale(m.gameState.deltaTime)
      m.updateCamera()
      m.updateParallax()

      m.resetKeyStates()
    end function

    private function updateParallax()
      levelTranslation = m.levelGroup.translation
      cameraX = levelTranslation[0] * 0.8
      cameraY = levelTranslation[1] * 0.8

      foregroundarallaxFactor = 0.3
      midParallaxFactor = 0.25
      backParallaxFactor = 0.12

      foreX = cameraX * foregroundarallaxFactor
      foreY = cameraY * foregroundarallaxFactor
      midX = cameraX * midParallaxFactor
      midY = cameraY * midParallaxFactor
      backX = cameraX * backParallaxFactor
      backY = cameraY * backParallaxFactor

      m.midGroundGroup.translation = [midX, midY]
      m.backgroundGroup.translation = [backX, backY]
      m.foregroundGroup.translation = [foreX, foreY]
    end function


    private function tick()
      m.player@.tick()
    end function

    private function updateCamera()
      playerTranslation = m.player.translation
      playerTranslation[0] = playerTranslation[0] * m.levelScale
      playerTranslation[1] = playerTranslation[1] * m.levelScale
      screenSize = [1920, 1080]


      desiredX = - (playerTranslation[0] - screenSize[0] / 2)
      desiredY = - (playerTranslation[1] - screenSize[1] / 2)

      minX = - (m.levelSize[0] - screenSize[0])
      maxX = 0
      minY = - (m.levelSize[1] - screenSize[1])
      maxY = 0

      desiredX = mc.clamp(desiredX, minX, maxX)
      desiredY = mc.clamp(desiredY, minY, maxY)

      m.levelGroup.translation = [desiredX, desiredY]
    end function

    @gameEngine
    private function updateFrameTimer()
      time = m.frameTimer.totalMilliseconds()
      if m.gameState.lastAnimTime > 0
        m.gameState.deltaTime = (time - m.gameState.lastAnimTime) / 1000.0
      end if
      m.gameState.lastAnimTime = time
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Camera zoom out
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private levelScale as float = 1.0
    private targetScale as float = 1.0
    private scaleSpeed as float = 0.2
    private scaleSpeedMod as float = 0

    private function updateCameraScale(deltaTime as float)
      m.adjustLevelScaleBasedOnPlayerSpeed()

      m.levelScale += (m.targetScale - m.levelScale) * (m.scaleSpeed + m.scaleSpeedMod) * deltaTime

      m.levelScale = mc.clamp(m.levelScale, 0.65, 1.0)

      m.applyLevelScale(m.levelScale)
    end function

    private function adjustLevelScaleBasedOnPlayerSpeed()
      xSpeed = abs(m.player.velocity[0])
      ' ? "PLAYER SPEED IS " xSpeed
      if xSpeed > 800
        m.targetScale = 0.65
        m.scaleSpeedMod = 0
      else
        m.targetScale = 1.0
        m.scaleSpeedMod = 0.95
      end if
    end function

    private function applyLevelScale(scale as float)
      m.levelGroup.scale = [scale, scale]
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Level Creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createLevel()
      m.levelGroup = m.createSGNode("Group", m.contentGroup, "levelGroup")

      m.createMap()

      'run  main game loop at 60fps
      m.gameAnim = new mv.animations.Generic(m.levelGroup, 999999)
      m.gameAnim.observeFraction(m.onGameAnimFraction)
      m.gameAnim.start()


      m.player = m.createSGNode({
        "_type": "Player"
        translation: m.mapManager@.getPlayerStartPosition()
        mapManager: m.mapManager
      }, m.levelGroup, "player")
      m.gameState.player = m.player
    end function

    private platformsGroup as mc.types.node
    private platforms = []
    private mapManager as mc.types.node

    private function createMap()
      m.platformsGroup = m.createSGNode("Group", m.levelGroup)
      m.mapManager = m.createSGNode("MapManager")
      m.mapManager@.loadMap(m.platformsGroup, "pkg:/images/map/level1.json")
      m.levelSize = m.mapManager.mapSize

    end function

    @gameEngine
    private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
      m.gameState.pressedKey = key
      m.gameState.isPressStart = press and not m.gameState.isKeyDown
      m.gameState.isPressFinish = not m.gameState.isKeyDown and not m.gameState.isPressFinish
      m.gameState.isKeyDown = press
      return key <> "back"
    end function

    @gameEngine
    private function resetKeyStates()
      m.gameState.isPressStart = false
      m.gameState.isPressFinish = false
      m.gameState.isLongPress = m.gameState.isKeyDown
    end function

    private function onInput()
      ' ? "KD " m.gameState.isKeyDown " K " m.pressedKey " start " m.gameState.isPressStart " LP " m.gameState.isLongPress
      if m.gameState.isPressStart
        if m.gameState.pressedKey = "OK"
          ' ? "BOOST!"
          m.bgSpeed += 80
          if m.bgSpeed > 1300
            m.bgSpeed = 50
          end if
        end if
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onFirstShow()
      super.onFirstShow()
    end function

    protected override function onShow()
      m.log.info("onShow")
      super.onShow()
    end function

  end class
end namespace
