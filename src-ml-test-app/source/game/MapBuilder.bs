import "pkg:/source/core/Utils.bs"

namespace mg
  class MapBuilder
    platforms = []
    levelGroup as mc.types.node

    function new(levelGroup as mc.types.node)
      m.levelGroup = levelGroup
    end function

    function createPlatformsFromMap(levelMap as mc.types.array)
      platformHeight = 40 ' Height of each platform
      platformWidth = 40 ' Width represented by each 'X'
      rowCount = 0
      for rowIndex = 0 to levelMap.count() - 1
        row = levelMap[[rowIndex]]
        startX = -1
        length = 0
        yPos = rowIndex * platformHeight ' Calculate y position based on row index

        for i = 0 to row.len() - 1
          if row.mid(i, 1) = "X"
            if startX = -1
              startX = i
            end if
            length += 1
          else
            if startX <> -1
              ' Create a platform for the sequence of 'X's
              m.platforms.push(m.createPlatform([startX * platformWidth, yPos], [length * platformWidth, platformHeight], "platform" + str(startX)))
              startX = -1 ' Reset for the next sequence of 'X's
              length = 0
            end if
          end if
        end for

        ' Check if the last character in the row is 'X' and create a platform
        if startX <> -1
          m.platforms.push(m.createPlatform([startX * platformWidth, yPos], [length * platformWidth, platformHeight], "platform" + str(startX)))
        end if
      next
    end function


    private function createPlatform(translation as mc.types.array, size as mc.types.array, id as string)
      return mc.createSGNode({
        "_type": "Floor"
        "id": id
        translation: translation
        size: size
        color: "#000000"
      }, m.levelGroup)
    end function


  end class
end namespace
