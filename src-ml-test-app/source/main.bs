function Main(args as dynamic)
  initScreen()
end function


function initScreen() as void
  'this will be where you setup your typical roku app
  'it will not be launched when running unit tests
  screen = CreateObject("roSGScreen")
  m.port = CreateObject("roMessagePort")
  screen.setMessagePort(m.port)

  rootScene = screen.CreateScene("MainScene")
  rootScene.id = "MainScene"

  createSounds()
  screen.show()

  'do any other stuff here that _must_ be done in main
  'I'm not a fan of that though; but just showing how it would work
  rootScene.callFunc("begin", m.args)
  rootScene.observeField("playSound", m.port)

  while true
    msg = wait(0, m.port)
    msgType = type(msg)

    if msgType = "roSGScreenEvent"
      if msg.isScreenClosed()
        return
      end if
    else if msgType = "roSGNodeEvent"
      if msg.getField() = "playSound"
        playSound(msg.getData())
      end if
    end if
  end while
end function

function createSounds()
  m.sounds = {}
  sound = createObject("roAudioResource", "select")
  m.maxSoundChannels = sound.MaxSimulStreams()
  m.soundChannelIndex = 0
  for each name in ["jump", "hit", "coin", "coin2", "landing"]
    sound = createObject("roAudioResource", `pkg:/images/sounds/${name}.wav`)
    m.sounds[name] = sound
  end for
end function

function playSound(soundData as mc.types.assocarray)
  if soundData = invalid
    ? " ignoring invalid sound data"
  end if
  soundName = soundData.name
  volume = soundData.volume
  if invalid <> soundName and m.Sounds.DoesExist(soundName)
    volume = mc.clamp(volume, 0, 100)
    ? "playing sound " soundName " at volume:" volume
    m.sounds[soundName].trigger(volume, m.soundChannelIndex)
    m.soundChannelIndex++
    if m.soundChannelIndex >= m.maxSoundChannels
      m.soundChannelIndex = 0
    end if
  else
    ? "No sound has been loaded under the name: "; soundName
  end if
end function
